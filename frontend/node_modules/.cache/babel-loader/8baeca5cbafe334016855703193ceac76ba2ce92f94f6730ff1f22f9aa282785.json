{"ast":null,"code":"var _jsxFileName = \"/Users/SUNLAB/hot-potato/frontend/src/app.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { initialTasks } from './data/tasks';\nimport { archiveTask } from './data/archive';\nimport { taskAPI, handleAPIError, checkConnection } from './services/api';\nimport HotPotatoGame from './game';\nimport Bank from './bank';\nimport Leaderboard from './leaderboard';\nimport BoardView from './boardview';\nimport GameView from './components/gameview';\nimport ListView from './components/listview';\nimport Header from './components/header';\nimport NavigationTabs from './components/navigationtabs';\nimport Modals from './components/modals';\nimport ErrorBoundary from './components/errorboundary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst teamStats = {\n  ilan: {\n    name: \"Ilan\",\n    avatar: \"👨‍💻\",\n    title: \"Admin 1\",\n    status: \"active\",\n    level: 12,\n    xp: 2847,\n    potatoesCompleted: 23,\n    streak: 7,\n    speciality: \"Game Master\"\n  },\n  nas: {\n    name: \"Nas\",\n    avatar: \"👩‍🎨\",\n    title: \"Admin 3\",\n    status: \"active\",\n    level: 15,\n    xp: 3421,\n    potatoesCompleted: 31,\n    streak: 12,\n    speciality: \"Quality Queen\"\n  },\n  juan: {\n    name: \"Juan\",\n    avatar: \"👨‍💼\",\n    title: \"Admin 2\",\n    status: \"break\",\n    level: 10,\n    xp: 2156,\n    potatoesCompleted: 18,\n    streak: 4,\n    speciality: \"Strategic Mind\"\n  },\n  jessie: {\n    name: \"Jessie\",\n    avatar: \"👩‍💻\",\n    title: \"Admin 5\",\n    status: \"active\",\n    level: 11,\n    xp: 2654,\n    potatoesCompleted: 20,\n    streak: 9,\n    speciality: \"Bug Crusher\"\n  },\n  brandon: {\n    name: \"Brandon\",\n    avatar: \"👨‍🔬\",\n    title: \"Admin 4\",\n    status: \"active\",\n    level: 13,\n    xp: 2983,\n    potatoesCompleted: 25,\n    streak: 6,\n    speciality: \"Data Wizard\"\n  }\n};\nconst ExecutiveDashboard = () => {\n  _s();\n  // State management\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [selectedView, setSelectedView] = useState('game');\n  const [hotPotatoes, setHotPotatoes] = useState([]);\n  const [error, setError] = useState(null);\n  const [isOnline, setIsOnline] = useState(true);\n  const [currentUser] = useState('ilan');\n  const [selectedPotato, setSelectedPotato] = useState(null);\n  const [showPassModal, setShowPassModal] = useState(false);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [celebrationValue, setCelebrationValue] = useState(0);\n  const [gameState, setGameState] = useState({\n    score: 0,\n    level: 1,\n    isPlaying: false\n  });\n  const [gameInstance, setGameInstance] = useState(null);\n\n  // Load tasks on component mount\n  useEffect(() => {\n    const loadTasks = async () => {\n      try {\n        console.log('Checking connection to backend...');\n        const connectionStatus = await checkConnection();\n        console.log('Connection status:', connectionStatus);\n        setIsOnline(connectionStatus);\n        if (connectionStatus) {\n          console.log('Loading tasks from API...');\n          const apiResponse = await taskAPI.getAllTasks();\n          console.log('API response:', apiResponse);\n          let apiTasks;\n          if (Array.isArray(apiResponse)) {\n            apiTasks = apiResponse;\n          } else if (apiResponse && Array.isArray(apiResponse.tasks)) {\n            apiTasks = apiResponse.tasks;\n          } else if (apiResponse && Array.isArray(apiResponse.data)) {\n            apiTasks = apiResponse.data;\n          } else {\n            console.log('Unexpected API response format:', apiResponse);\n            apiTasks = [];\n          }\n          console.log('Processed API tasks:', apiTasks);\n          const activeTasks = apiTasks.map(task => ({\n            ...task,\n            category: task.category === \"Customer Satisfaction\" ? \"Post Construction\" : task.category\n          }));\n          setHotPotatoes(activeTasks);\n          setError(null);\n        } else {\n          throw new Error('Server unavailable');\n        }\n      } catch (error) {\n        console.error('Failed to load tasks:', error);\n        const errorInfo = handleAPIError(error);\n        setError(`${errorInfo.message} (${errorInfo.type})`);\n        setIsOnline(false);\n        console.log('Using fallback tasks...');\n        const fallbackTasks = (initialTasks || []).map(task => ({\n          ...task,\n          category: task.category === \"Customer Satisfaction\" ? \"Post Construction\" : task.category\n        }));\n        setHotPotatoes(fallbackTasks);\n      }\n    };\n    loadTasks();\n  }, []);\n\n  // Timer effect\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n      setHotPotatoes(prev => prev.map(potato => ({\n        ...potato,\n        timeLeft: Math.max(0, potato.timeLeft - 1),\n        temperature: Math.min(100, (potato.temperature || 0) + 0.1)\n      })));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Game functions\n  const updateScore = points => {\n    setGameState(prev => ({\n      ...prev,\n      score: prev.score + points\n    }));\n  };\n  const startGame = () => {\n    setGameState(prev => ({\n      ...prev,\n      isPlaying: true\n    }));\n    setTimeout(() => {\n      const game = new HotPotatoGame('gameCanvas', gameState, updateScore, hotPotatoes, teamStats, currentUser, handleTaskClick, handleCompletePotato);\n      setGameInstance(game);\n      game.start();\n    }, 100);\n  };\n  const endGame = () => {\n    if (gameInstance) {\n      gameInstance.stop();\n      setGameInstance(null);\n    }\n    setGameState(prev => ({\n      ...prev,\n      isPlaying: false\n    }));\n  };\n  const handleTaskClick = task => {\n    setSelectedPotato(task);\n    setShowPassModal(true);\n  };\n  const handlePassPotato = async (potato, toUser) => {\n    try {\n      const updatedData = {\n        holder: toUser,\n        passCount: (potato.passCount || 0) + 1,\n        lastPasser: currentUser,\n        temperature: Math.min(100, (potato.temperature || 0) + 5),\n        combo: potato.lastPasser === toUser ? (potato.combo || 0) + 1 : 0\n      };\n      if (isOnline) {\n        const updatedTask = await taskAPI.updateTask(potato.id, updatedData);\n        setHotPotatoes(hotPotatoes.map(p => p.id === potato.id ? updatedTask : p));\n      } else {\n        setHotPotatoes(hotPotatoes.map(p => p.id === potato.id ? {\n          ...p,\n          ...updatedData\n        } : p));\n      }\n      setShowPassModal(false);\n      setSelectedPotato(null);\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      setError(`Failed to pass task: ${errorInfo.message}`);\n      const newPotatoes = hotPotatoes.map(p => {\n        if (p.id === potato.id) {\n          return {\n            ...p,\n            holder: toUser,\n            passCount: (p.passCount || 0) + 1,\n            lastPasser: currentUser,\n            temperature: Math.min(100, (p.temperature || 0) + 5),\n            combo: p.lastPasser === toUser ? (p.combo || 0) + 1 : 0\n          };\n        }\n        return p;\n      });\n      setHotPotatoes(newPotatoes);\n      setShowPassModal(false);\n      setSelectedPotato(null);\n    }\n  };\n  const handleCompletePotato = async potato => {\n    try {\n      const temperatureBonus = (potato.temperature || 0) > 80 ? 1.5 : 1;\n      const earnedValue = Math.round(potato.value * temperatureBonus);\n      await archiveTask(potato, {\n        completedBy: currentUser,\n        completedAt: new Date().toISOString(),\n        earnedValue: earnedValue\n      });\n      if (isOnline) {\n        await taskAPI.deleteTask(potato.id);\n      }\n      setHotPotatoes(hotPotatoes.filter(p => p.id !== potato.id));\n      setCelebrationValue(earnedValue);\n      setShowCelebration(true);\n      setTimeout(() => setShowCelebration(false), 3000);\n      updateScore(earnedValue / 10);\n    } catch (error) {\n      console.error('Failed to complete task:', error);\n      setHotPotatoes(hotPotatoes.filter(p => p.id !== potato.id));\n      setCelebrationValue(potato.value);\n      setShowCelebration(true);\n      setTimeout(() => setShowCelebration(false), 3000);\n    }\n  };\n\n  // Cleanup effects\n  useEffect(() => {\n    return () => {\n      if (gameInstance) {\n        gameInstance.stop();\n      }\n    };\n  }, [gameInstance]);\n  useEffect(() => {\n    if (gameInstance) {\n      gameInstance.hotPotatoes = hotPotatoes;\n    }\n  }, [hotPotatoes, gameInstance]);\n\n  // Main render\n  return /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen\",\n      style: {\n        background: 'linear-gradient(135deg, #66B2FF 0%, #002C54 100%)',\n        fontFamily: 'Montserrat, sans-serif'\n      },\n      children: [error && hotPotatoes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed top-4 left-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm\",\n          children: [\"\\u26A0\\uFE0F \", isOnline ? 'API Error' : 'Server offline', \" - running in \", isOnline ? 'degraded' : 'offline', \" mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setError(null),\n          className: \"text-white hover:text-gray-200 ml-4\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modals, {\n        showCelebration: showCelebration,\n        celebrationValue: celebrationValue,\n        showPassModal: showPassModal,\n        selectedPotato: selectedPotato,\n        teamStats: teamStats,\n        currentUser: currentUser,\n        handlePassPotato: handlePassPotato,\n        setShowPassModal: setShowPassModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        hotPotatoes: hotPotatoes,\n        currentUser: currentUser,\n        currentTime: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavigationTabs, {\n        selectedView: selectedView,\n        setSelectedView: setSelectedView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-3 sm:px-6 pb-6\",\n        children: [selectedView === 'game' && /*#__PURE__*/_jsxDEV(GameView, {\n          gameState: gameState,\n          startGame: startGame,\n          endGame: endGame,\n          hotPotatoes: hotPotatoes,\n          currentUser: currentUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), selectedView === 'list' && /*#__PURE__*/_jsxDEV(ListView, {\n          hotPotatoes: hotPotatoes,\n          currentUser: currentUser,\n          teamStats: teamStats,\n          handleTaskClick: handleTaskClick,\n          handleCompletePotato: handleCompletePotato\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), selectedView === 'board' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl sm:text-3xl font-bold text-white mb-4 sm:mb-6\",\n            style: {\n              fontFamily: 'Montserrat, sans-serif'\n            },\n            children: \"Task Board \\uD83D\\uDCCA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(BoardView, {\n            hotPotatoes: hotPotatoes,\n            teamStats: teamStats\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), selectedView === 'leaderboard' && /*#__PURE__*/_jsxDEV(Leaderboard, {\n          teamStats: teamStats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), selectedView === 'bank' && /*#__PURE__*/_jsxDEV(Bank, {\n          teamStats: teamStats,\n          hotPotatoes: hotPotatoes,\n          currentUser: currentUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(ExecutiveDashboard, \"ZELx53mtkQgCxP2VGV4Oknd/ASw=\");\n_c = ExecutiveDashboard;\nexport default ExecutiveDashboard;\nvar _c;\n$RefreshReg$(_c, \"ExecutiveDashboard\");","map":{"version":3,"names":["React","useState","useEffect","initialTasks","archiveTask","taskAPI","handleAPIError","checkConnection","HotPotatoGame","Bank","Leaderboard","BoardView","GameView","ListView","Header","NavigationTabs","Modals","ErrorBoundary","jsxDEV","_jsxDEV","teamStats","ilan","name","avatar","title","status","level","xp","potatoesCompleted","streak","speciality","nas","juan","jessie","brandon","ExecutiveDashboard","_s","currentTime","setCurrentTime","Date","selectedView","setSelectedView","hotPotatoes","setHotPotatoes","error","setError","isOnline","setIsOnline","currentUser","selectedPotato","setSelectedPotato","showPassModal","setShowPassModal","showCelebration","setShowCelebration","celebrationValue","setCelebrationValue","gameState","setGameState","score","isPlaying","gameInstance","setGameInstance","loadTasks","console","log","connectionStatus","apiResponse","getAllTasks","apiTasks","Array","isArray","tasks","data","activeTasks","map","task","category","Error","errorInfo","message","type","fallbackTasks","timer","setInterval","prev","potato","timeLeft","Math","max","temperature","min","clearInterval","updateScore","points","startGame","setTimeout","game","handleTaskClick","handleCompletePotato","start","endGame","stop","handlePassPotato","toUser","updatedData","holder","passCount","lastPasser","combo","updatedTask","updateTask","id","p","newPotatoes","temperatureBonus","earnedValue","round","value","completedBy","completedAt","toISOString","deleteTask","filter","children","className","style","background","fontFamily","length","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/app.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { initialTasks } from './data/tasks';\nimport { archiveTask } from './data/archive';\nimport { taskAPI, handleAPIError, checkConnection } from './services/api';\nimport HotPotatoGame from './game';\nimport Bank from './bank';\nimport Leaderboard from './leaderboard';\nimport BoardView from './boardview';\nimport GameView from './components/gameview';\nimport ListView from './components/listview';\nimport Header from './components/header';\nimport NavigationTabs from './components/navigationtabs';\nimport Modals from './components/modals';\nimport ErrorBoundary from './components/errorboundary';\n\nconst teamStats = {\n  ilan: { name: \"Ilan\", avatar: \"👨‍💻\", title: \"Admin 1\", status: \"active\", level: 12, xp: 2847, potatoesCompleted: 23, streak: 7, speciality: \"Game Master\" },\n  nas: { name: \"Nas\", avatar: \"👩‍🎨\", title: \"Admin 3\", status: \"active\", level: 15, xp: 3421, potatoesCompleted: 31, streak: 12, speciality: \"Quality Queen\" },\n  juan: { name: \"Juan\", avatar: \"👨‍💼\", title: \"Admin 2\", status: \"break\", level: 10, xp: 2156, potatoesCompleted: 18, streak: 4, speciality: \"Strategic Mind\" },\n  jessie: { name: \"Jessie\", avatar: \"👩‍💻\", title: \"Admin 5\", status: \"active\", level: 11, xp: 2654, potatoesCompleted: 20, streak: 9, speciality: \"Bug Crusher\" },\n  brandon: { name: \"Brandon\", avatar: \"👨‍🔬\", title: \"Admin 4\", status: \"active\", level: 13, xp: 2983, potatoesCompleted: 25, streak: 6, speciality: \"Data Wizard\" }\n};\n\nconst ExecutiveDashboard = () => {\n  // State management\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [selectedView, setSelectedView] = useState('game');\n  const [hotPotatoes, setHotPotatoes] = useState([]);\n  const [error, setError] = useState(null);\n  const [isOnline, setIsOnline] = useState(true);\n  const [currentUser] = useState('ilan');\n  const [selectedPotato, setSelectedPotato] = useState(null);\n  const [showPassModal, setShowPassModal] = useState(false);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [celebrationValue, setCelebrationValue] = useState(0);\n  const [gameState, setGameState] = useState({ score: 0, level: 1, isPlaying: false });\n  const [gameInstance, setGameInstance] = useState(null);\n\n  // Load tasks on component mount\n  useEffect(() => {\n    const loadTasks = async () => {\n      try {\n        console.log('Checking connection to backend...');\n        const connectionStatus = await checkConnection();\n        console.log('Connection status:', connectionStatus);\n        setIsOnline(connectionStatus);\n\n        if (connectionStatus) {\n          console.log('Loading tasks from API...');\n          const apiResponse = await taskAPI.getAllTasks();\n          console.log('API response:', apiResponse);\n          \n          let apiTasks;\n          if (Array.isArray(apiResponse)) {\n            apiTasks = apiResponse;\n          } else if (apiResponse && Array.isArray(apiResponse.tasks)) {\n            apiTasks = apiResponse.tasks;\n          } else if (apiResponse && Array.isArray(apiResponse.data)) {\n            apiTasks = apiResponse.data;\n          } else {\n            console.log('Unexpected API response format:', apiResponse);\n            apiTasks = [];\n          }\n          \n          console.log('Processed API tasks:', apiTasks);\n          const activeTasks = apiTasks.map(task => ({\n            ...task,\n            category: task.category === \"Customer Satisfaction\" ? \"Post Construction\" : task.category\n          }));\n          setHotPotatoes(activeTasks);\n          setError(null);\n        } else {\n          throw new Error('Server unavailable');\n        }\n      } catch (error) {\n        console.error('Failed to load tasks:', error);\n        const errorInfo = handleAPIError(error);\n        setError(`${errorInfo.message} (${errorInfo.type})`);\n        setIsOnline(false);\n        \n        console.log('Using fallback tasks...');\n        const fallbackTasks = (initialTasks || []).map(task => ({\n          ...task,\n          category: task.category === \"Customer Satisfaction\" ? \"Post Construction\" : task.category\n        }));\n        setHotPotatoes(fallbackTasks);\n      }\n    };\n    \n    loadTasks();\n  }, []);\n\n  // Timer effect\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n      setHotPotatoes(prev => prev.map(potato => ({\n        ...potato,\n        timeLeft: Math.max(0, potato.timeLeft - 1),\n        temperature: Math.min(100, (potato.temperature || 0) + 0.1)\n      })));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Game functions\n  const updateScore = (points) => {\n    setGameState(prev => ({ ...prev, score: prev.score + points }));\n  };\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, isPlaying: true }));\n    \n    setTimeout(() => {\n      const game = new HotPotatoGame(\n        'gameCanvas', \n        gameState, \n        updateScore, \n        hotPotatoes, \n        teamStats, \n        currentUser,\n        handleTaskClick,\n        handleCompletePotato\n      );\n      setGameInstance(game);\n      game.start();\n    }, 100);\n  };\n\n  const endGame = () => {\n    if (gameInstance) {\n      gameInstance.stop();\n      setGameInstance(null);\n    }\n    setGameState(prev => ({ ...prev, isPlaying: false }));\n  };\n\n  const handleTaskClick = (task) => {\n    setSelectedPotato(task);\n    setShowPassModal(true);\n  };\n\n  const handlePassPotato = async (potato, toUser) => {\n    try {\n      const updatedData = {\n        holder: toUser,\n        passCount: (potato.passCount || 0) + 1,\n        lastPasser: currentUser,\n        temperature: Math.min(100, (potato.temperature || 0) + 5),\n        combo: potato.lastPasser === toUser ? (potato.combo || 0) + 1 : 0\n      };\n\n      if (isOnline) {\n        const updatedTask = await taskAPI.updateTask(potato.id, updatedData);\n        setHotPotatoes(hotPotatoes.map(p => \n          p.id === potato.id ? updatedTask : p\n        ));\n      } else {\n        setHotPotatoes(hotPotatoes.map(p => \n          p.id === potato.id ? { ...p, ...updatedData } : p\n        ));\n      }\n      \n      setShowPassModal(false);\n      setSelectedPotato(null);\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      setError(`Failed to pass task: ${errorInfo.message}`);\n      \n      const newPotatoes = hotPotatoes.map(p => {\n        if (p.id === potato.id) {\n          return {\n            ...p,\n            holder: toUser,\n            passCount: (p.passCount || 0) + 1,\n            lastPasser: currentUser,\n            temperature: Math.min(100, (p.temperature || 0) + 5),\n            combo: p.lastPasser === toUser ? (p.combo || 0) + 1 : 0\n          };\n        }\n        return p;\n      });\n      setHotPotatoes(newPotatoes);\n      setShowPassModal(false);\n      setSelectedPotato(null);\n    }\n  };\n\n  const handleCompletePotato = async (potato) => {\n    try {\n      const temperatureBonus = (potato.temperature || 0) > 80 ? 1.5 : 1;\n      const earnedValue = Math.round(potato.value * temperatureBonus);\n\n      await archiveTask(potato, {\n        completedBy: currentUser,\n        completedAt: new Date().toISOString(),\n        earnedValue: earnedValue\n      });\n      \n      if (isOnline) {\n        await taskAPI.deleteTask(potato.id);\n      }\n      \n      setHotPotatoes(hotPotatoes.filter(p => p.id !== potato.id));\n      setCelebrationValue(earnedValue);\n      setShowCelebration(true);\n      setTimeout(() => setShowCelebration(false), 3000);\n      \n      updateScore(earnedValue / 10);\n      \n    } catch (error) {\n      console.error('Failed to complete task:', error);\n      setHotPotatoes(hotPotatoes.filter(p => p.id !== potato.id));\n      setCelebrationValue(potato.value);\n      setShowCelebration(true);\n      setTimeout(() => setShowCelebration(false), 3000);\n    }\n  };\n\n  // Cleanup effects\n  useEffect(() => {\n    return () => {\n      if (gameInstance) {\n        gameInstance.stop();\n      }\n    };\n  }, [gameInstance]);\n\n  useEffect(() => {\n    if (gameInstance) {\n      gameInstance.hotPotatoes = hotPotatoes;\n    }\n  }, [hotPotatoes, gameInstance]);\n\n  // Main render\n  return (\n    <ErrorBoundary>\n      <div className=\"min-h-screen\" style={{background: 'linear-gradient(135deg, #66B2FF 0%, #002C54 100%)', fontFamily: 'Montserrat, sans-serif'}}>\n        \n        {/* Error Display */}\n        {error && hotPotatoes.length > 0 && (\n          <div className=\"fixed top-4 left-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 flex items-center justify-between\">\n            <span className=\"text-sm\">⚠️ {isOnline ? 'API Error' : 'Server offline'} - running in {isOnline ? 'degraded' : 'offline'} mode</span>\n            <button onClick={() => setError(null)} className=\"text-white hover:text-gray-200 ml-4\">✕</button>\n          </div>\n        )}\n\n        {/* Modals */}\n        <Modals \n          showCelebration={showCelebration}\n          celebrationValue={celebrationValue}\n          showPassModal={showPassModal}\n          selectedPotato={selectedPotato}\n          teamStats={teamStats}\n          currentUser={currentUser}\n          handlePassPotato={handlePassPotato}\n          setShowPassModal={setShowPassModal}\n        />\n\n        {/* Header */}\n        <Header \n          hotPotatoes={hotPotatoes}\n          currentUser={currentUser}\n          currentTime={currentTime}\n        />\n\n        {/* Navigation */}\n        <NavigationTabs \n          selectedView={selectedView}\n          setSelectedView={setSelectedView}\n        />\n\n        {/* Main Content */}\n        <div className=\"px-3 sm:px-6 pb-6\">\n          {selectedView === 'game' && (\n            <GameView \n              gameState={gameState}\n              startGame={startGame}\n              endGame={endGame}\n              hotPotatoes={hotPotatoes}\n              currentUser={currentUser}\n            />\n          )}\n\n          {selectedView === 'list' && (\n            <ListView \n              hotPotatoes={hotPotatoes}\n              currentUser={currentUser}\n              teamStats={teamStats}\n              handleTaskClick={handleTaskClick}\n              handleCompletePotato={handleCompletePotato}\n            />\n          )}\n\n          {selectedView === 'board' && (\n            <div>\n              <h2 className=\"text-2xl sm:text-3xl font-bold text-white mb-4 sm:mb-6\" style={{fontFamily: 'Montserrat, sans-serif'}}>\n                Task Board 📊\n              </h2>\n              <BoardView hotPotatoes={hotPotatoes} teamStats={teamStats} />\n            </div>\n          )}\n\n          {selectedView === 'leaderboard' && (\n            <Leaderboard teamStats={teamStats} />\n          )}\n\n          {selectedView === 'bank' && (\n            <Bank \n              teamStats={teamStats} \n              hotPotatoes={hotPotatoes} \n              currentUser={currentUser} \n            />\n          )}\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n};\n\nexport default ExecutiveDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}