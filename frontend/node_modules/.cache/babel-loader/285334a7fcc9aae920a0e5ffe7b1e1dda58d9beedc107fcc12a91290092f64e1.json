{"ast":null,"code":"// Draw task modal if active\nif (this.showTaskModal && this.selectedTask) {\n  this.drawTaskModal();\n}\n\n// Draw pass modal if active\nif (this.showPassModal && this.selectedTask) {\n  this.drawPassModal();\n}\nclass HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.teamStats = teamStats;\n    this.currentUser = currentUser;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.hoveredSpirit = null;\n    this.selectedTask = null;\n    this.showTaskModal = false;\n    this.showPassModal = false;\n    this.loadImages();\n    this.resizeCanvas();\n    this.bindEvents();\n  }\n  bindEvents() {\n    // Add mouse move listener for hover effects\n    this.canvas.addEventListener('mousemove', e => {\n      const rect = this.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      let newHoveredSpirit = null;\n\n      // Check if mouse is over any spirit\n      for (let spirit of this.spirits) {\n        const distance = Math.sqrt((mouseX - spirit.x) ** 2 + (mouseY - spirit.y) ** 2);\n        if (distance < 40) {\n          newHoveredSpirit = spirit;\n          break;\n        }\n      }\n      this.hoveredSpirit = newHoveredSpirit;\n      this.canvas.style.cursor = this.hoveredSpirit ? 'pointer' : 'default';\n    });\n\n    // Add click listener for spirit interactions\n    this.canvas.addEventListener('click', e => {\n      const rect = this.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n\n      // Handle modal button clicks first\n      if (this.showTaskModal && this.selectedTask) {\n        this.handleModalClick(mouseX, mouseY);\n        return;\n      }\n      if (this.showPassModal && this.selectedTask) {\n        this.handlePassModalClick(mouseX, mouseY);\n        return;\n      }\n\n      // Check if clicking on a spirit\n      for (let spirit of this.spirits) {\n        const distance = Math.sqrt((mouseX - spirit.x) ** 2 + (mouseY - spirit.y) ** 2);\n        if (distance < 40) {\n          this.handleSpiritClick(spirit);\n          return;\n        }\n      }\n    });\n\n    // Add escape key listener\n    document.addEventListener('keydown', e => {\n      if (e.key === 'Escape') {\n        this.showTaskModal = false;\n        this.showPassModal = false;\n        this.selectedTask = null;\n      }\n    });\n\n    // Add mouse leave listener\n    this.canvas.addEventListener('mouseleave', () => {\n      this.hoveredSpirit = null;\n      this.canvas.style.cursor = 'default';\n    });\n  }\n  handleSpiritClick(spirit) {\n    // Find the first task at this location\n    const tasksAtLocation = this.hotPotatoes.filter(task => task.category === spirit.location.category);\n    if (tasksAtLocation.length > 0) {\n      this.selectedTask = tasksAtLocation[0];\n      this.showTaskModal = true;\n      this.showPassModal = false;\n    }\n  }\n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png',\n      spirit3: 'myimages/spirit3.png'\n    };\n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    return [{\n      name: \"Sales Office\",\n      x: 20.8,\n      y: 76.2,\n      category: \"Sales\"\n    }, {\n      name: \"New Lead\",\n      x: 20.2,\n      y: 39.1,\n      category: \"New Lead\"\n    }, {\n      name: \"New Customer\",\n      x: 45.6,\n      y: 35.2,\n      category: \"New Customer\"\n    }, {\n      name: \"Pre-Construction\",\n      x: 69.0,\n      y: 24.4,\n      category: \"Pre-Construction\"\n    }, {\n      name: \"Construction\",\n      x: 71.6,\n      y: 65.4,\n      category: \"Construction\"\n    }, {\n      name: \"Post Construction\",\n      x: 86.6,\n      y: 77.1,\n      category: \"Post Construction\"\n    }];\n  }\n  generateSpirits() {\n    this.spirits = [];\n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = location.x / 100 * this.canvas.width;\n      const actualY = location.y / 100 * this.canvas.height;\n\n      // Find which difficulties have tasks at this location\n      const tasksAtLocation = this.hotPotatoes.filter(task => task.category === location.category);\n      if (tasksAtLocation.length > 0) {\n        // Get the difficulty of the first task (or you could use most common, highest priority, etc.)\n        const taskDifficulty = tasksAtLocation[0].difficulty;\n\n        // Only create one spirit - the one matching the task difficulty\n        this.spirits.push({\n          x: actualX,\n          y: actualY,\n          difficulty: taskDifficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025\n        });\n      }\n      // If no tasks at this location, no spirit is shown\n    });\n  }\n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => task.category === location.category && task.difficulty === difficulty).length;\n  }\n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  stop() {\n    this.isRunning = false;\n    // Clean up event listeners\n    this.canvas.removeEventListener('mousemove', this.bindEvents);\n    this.canvas.removeEventListener('mouseleave', this.bindEvents);\n  }\n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw background only\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    // Draw location titles\n    this.locations.forEach((location, index) => {\n      // Convert percentages to actual pixels\n      const actualX = location.x / 100 * this.canvas.width;\n      const actualY = location.y / 100 * this.canvas.height;\n\n      // Draw location title with background\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n      this.ctx.fillRect(actualX - 60, actualY - 80, 120, 25);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(location.name, actualX, actualY - 67);\n    });\n\n    // Draw spirits only - one per location based on actual task data\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      if (spiritImage && spiritImage.complete && spiritImage.naturalWidth > 0) {\n        // Dynamic size based on hover state\n        const isHovered = this.hoveredSpirit === spirit;\n        const imageSize = isHovered ? 80 : 50; // 50px normal, 80px on hover\n\n        // Use high-quality rendering\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n\n        // Draw the spirit image (clean PNG without numbers)\n        this.ctx.drawImage(spiritImage, spirit.x - imageSize / 2, spirit.y - imageSize / 2, imageSize, imageSize);\n      }\n    });\n  }\n  drawTaskModal() {\n    var _task$value, _this$teamStats$task$;\n    const task = this.selectedTask;\n    const modalWidth = 400;\n    const modalHeight = 300;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n\n    // Modal background\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillRect(modalX, modalY, modalWidth, modalHeight);\n    this.ctx.strokeStyle = '#333';\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(modalX, modalY, modalWidth, modalHeight);\n\n    // Task title\n    this.ctx.fillStyle = '#333';\n    this.ctx.font = 'bold 18px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(task.title, modalX + modalWidth / 2, modalY + 40);\n\n    // Task details\n    this.ctx.font = '14px Arial';\n    this.ctx.textAlign = 'left';\n    const details = [`Category: ${task.category}`, `Difficulty: ${task.difficulty}`, `Value: ${((_task$value = task.value) === null || _task$value === void 0 ? void 0 : _task$value.toLocaleString()) || 0}`, `Holder: ${((_this$teamStats$task$ = this.teamStats[task.holder]) === null || _this$teamStats$task$ === void 0 ? void 0 : _this$teamStats$task$.name) || 'Unknown'}`, `Description: ${task.description || 'No description'}`];\n    details.forEach((detail, index) => {\n      this.ctx.fillText(detail, modalX + 20, modalY + 80 + index * 25);\n    });\n\n    // Buttons\n    const buttonY = modalY + modalHeight - 60;\n    const buttonHeight = 40;\n\n    // Cook button (green)\n    this.ctx.fillStyle = '#4CAF50';\n    this.ctx.fillRect(modalX + 50, buttonY, 120, buttonHeight);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = 'bold 16px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('üç≥ Cook', modalX + 110, buttonY + 25);\n\n    // Pass button (orange)\n    this.ctx.fillStyle = '#FF9800';\n    this.ctx.fillRect(modalX + 230, buttonY, 120, buttonHeight);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillText('üîÑ Pass', modalX + 290, buttonY + 25);\n  }\n  drawPassModal() {\n    const modalWidth = 500;\n    const modalHeight = 400;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n\n    // Modal background\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillRect(modalX, modalY, modalWidth, modalHeight);\n    this.ctx.strokeStyle = '#333';\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(modalX, modalY, modalWidth, modalHeight);\n\n    // Title\n    this.ctx.fillStyle = '#333';\n    this.ctx.font = 'bold 18px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('Pass to Teammate', modalX + modalWidth / 2, modalY + 40);\n\n    // Draw teammate buttons\n    const teammates = Object.entries(this.teamStats).filter(([id]) => id !== this.currentUser);\n    const buttonWidth = 200;\n    const buttonHeight = 50;\n    const startY = modalY + 80;\n    teammates.forEach(([id, stats], index) => {\n      const buttonX = modalX + 50 + index % 2 * 220;\n      const buttonY = startY + Math.floor(index / 2) * 70;\n      this.ctx.fillStyle = '#2196F3';\n      this.ctx.fillRect(buttonX, buttonY, buttonWidth, buttonHeight);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 14px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(`${stats.avatar} ${stats.name}`, buttonX + buttonWidth / 2, buttonY + 30);\n    });\n\n    // Cancel button\n    this.ctx.fillStyle = '#f44336';\n    this.ctx.fillRect(modalX + modalWidth / 2 - 60, modalY + modalHeight - 60, 120, 40);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = 'bold 16px Arial';\n    this.ctx.fillText('Cancel', modalX + modalWidth / 2, modalY + modalHeight - 35);\n  }\n  handleModalClick(mouseX, mouseY) {\n    const modalWidth = 400;\n    const modalHeight = 300;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n    const buttonY = modalY + modalHeight - 60;\n\n    // Check Cook button\n    if (mouseX >= modalX + 50 && mouseX <= modalX + 170 && mouseY >= buttonY && mouseY <= buttonY + 40) {\n      this.handleCook();\n    }\n\n    // Check Pass button  \n    if (mouseX >= modalX + 230 && mouseX <= modalX + 350 && mouseY >= buttonY && mouseY <= buttonY + 40) {\n      this.showPassModal = true;\n      this.showTaskModal = false;\n    }\n  }\n  handlePassModalClick(mouseX, mouseY) {\n    const modalWidth = 500;\n    const modalHeight = 400;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n\n    // Check teammate buttons\n    const teammates = Object.entries(this.teamStats).filter(([id]) => id !== this.currentUser);\n    const buttonWidth = 200;\n    const buttonHeight = 50;\n    const startY = modalY + 80;\n    teammates.forEach(([id, stats], index) => {\n      const buttonX = modalX + 50 + index % 2 * 220;\n      const buttonY = startY + Math.floor(index / 2) * 70;\n      if (mouseX >= buttonX && mouseX <= buttonX + buttonWidth && mouseY >= buttonY && mouseY <= buttonY + buttonHeight) {\n        this.handlePass(id);\n      }\n    });\n\n    // Check Cancel button\n    if (mouseX >= modalX + modalWidth / 2 - 60 && mouseX <= modalX + modalWidth / 2 + 60 && mouseY >= modalY + modalHeight - 60 && mouseY <= modalY + modalHeight - 20) {\n      this.showPassModal = false;\n      this.showTaskModal = true;\n    }\n  }\n  handleCook() {\n    if (this.selectedTask) {\n      // Earn cash based on task value\n      const earnedValue = this.selectedTask.value || 100;\n      this.updateScore(earnedValue / 10);\n\n      // Complete the task through the callback\n      this.onTaskComplete(this.selectedTask);\n\n      // Close modal and regenerate spirits\n      this.showTaskModal = false;\n      this.selectedTask = null;\n      this.generateSpirits();\n    }\n  }\n  handlePass(toUserId) {\n    if (this.selectedTask) {\n      // Pass the task through the callback\n      this.onTaskClick(this.selectedTask);\n\n      // Close modals\n      this.showPassModal = false;\n      this.showTaskModal = false;\n      this.selectedTask = null;\n    }\n  }\n  getSpiritImage(difficulty) {\n    const imageMap = {\n      common: 'spirit1',\n      rare: 'spirit2',\n      epic: 'spirit3'\n    };\n    return this.images[imageMap[difficulty]];\n  }\n  getSpiritColor(difficulty) {\n    const colorMap = {\n      common: '#66B2FF',\n      rare: '#9B59B6',\n      epic: '#FF6B6B'\n    };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\nexport default HotPotatoGame;","map":{"version":3,"names":["showTaskModal","selectedTask","drawTaskModal","showPassModal","drawPassModal","HotPotatoGame","constructor","canvasId","gameState","updateScore","hotPotatoes","teamStats","currentUser","onTaskClick","onTaskComplete","canvas","document","getElementById","ctx","getContext","isRunning","spirits","locations","initializeLocations","hoveredSpirit","loadImages","resizeCanvas","bindEvents","addEventListener","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","newHoveredSpirit","spirit","distance","Math","sqrt","x","y","style","cursor","handleModalClick","handlePassModalClick","handleSpiritClick","key","tasksAtLocation","filter","task","category","location","length","images","imageUrls","background","spirit1","spirit2","spirit3","url","Object","entries","img","Image","src","name","generateSpirits","forEach","actualX","width","actualY","height","taskDifficulty","difficulty","push","size","min","getTaskCount","start","gameLoop","stop","removeEventListener","render","clearRect","drawImage","index","fillStyle","fillRect","font","textAlign","textBaseline","fillText","spiritImage","getSpiritImage","complete","naturalWidth","isHovered","imageSize","imageSmoothingEnabled","imageSmoothingQuality","_task$value","_this$teamStats$task$","modalWidth","modalHeight","modalX","modalY","strokeStyle","lineWidth","strokeRect","title","details","value","toLocaleString","holder","description","detail","buttonY","buttonHeight","teammates","id","buttonWidth","startY","stats","buttonX","floor","avatar","handleCook","handlePass","earnedValue","toUserId","imageMap","common","rare","epic","getSpiritColor","colorMap","requestAnimationFrame"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/game.js"],"sourcesContent":["// Draw task modal if active\n    if (this.showTaskModal && this.selectedTask) {\n      this.drawTaskModal();\n    }\n    \n    // Draw pass modal if active\n    if (this.showPassModal && this.selectedTask) {\n      this.drawPassModal();\n    }class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.teamStats = teamStats;\n    this.currentUser = currentUser;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    \n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.hoveredSpirit = null;\n    this.selectedTask = null;\n    this.showTaskModal = false;\n    this.showPassModal = false;\n    this.loadImages();\n    this.resizeCanvas();\n    this.bindEvents();\n  }\n  \n  bindEvents() {\n    // Add mouse move listener for hover effects\n    this.canvas.addEventListener('mousemove', (e) => {\n      const rect = this.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      \n      let newHoveredSpirit = null;\n      \n      // Check if mouse is over any spirit\n      for (let spirit of this.spirits) {\n        const distance = Math.sqrt((mouseX - spirit.x) ** 2 + (mouseY - spirit.y) ** 2);\n        if (distance < 40) {\n          newHoveredSpirit = spirit;\n          break;\n        }\n      }\n      \n      this.hoveredSpirit = newHoveredSpirit;\n      this.canvas.style.cursor = this.hoveredSpirit ? 'pointer' : 'default';\n    });\n    \n    // Add click listener for spirit interactions\n    this.canvas.addEventListener('click', (e) => {\n      const rect = this.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      \n      // Handle modal button clicks first\n      if (this.showTaskModal && this.selectedTask) {\n        this.handleModalClick(mouseX, mouseY);\n        return;\n      }\n      \n      if (this.showPassModal && this.selectedTask) {\n        this.handlePassModalClick(mouseX, mouseY);\n        return;\n      }\n      \n      // Check if clicking on a spirit\n      for (let spirit of this.spirits) {\n        const distance = Math.sqrt((mouseX - spirit.x) ** 2 + (mouseY - spirit.y) ** 2);\n        if (distance < 40) {\n          this.handleSpiritClick(spirit);\n          return;\n        }\n      }\n    });\n    \n    // Add escape key listener\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        this.showTaskModal = false;\n        this.showPassModal = false;\n        this.selectedTask = null;\n      }\n    });\n    \n    // Add mouse leave listener\n    this.canvas.addEventListener('mouseleave', () => {\n      this.hoveredSpirit = null;\n      this.canvas.style.cursor = 'default';\n    });\n  }\n  \n  handleSpiritClick(spirit) {\n    // Find the first task at this location\n    const tasksAtLocation = this.hotPotatoes.filter(task => task.category === spirit.location.category);\n    if (tasksAtLocation.length > 0) {\n      this.selectedTask = tasksAtLocation[0];\n      this.showTaskModal = true;\n      this.showPassModal = false;\n    }\n  }\n  \n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png', \n      spirit3: 'myimages/spirit3.png'\n    };\n    \n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  \n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    return [\n      { name: \"Sales Office\", x: 20.8, y: 76.2, category: \"Sales\" },\n      { name: \"New Lead\", x: 20.2, y: 39.1, category: \"New Lead\" },\n      { name: \"New Customer\", x: 45.6, y: 35.2, category: \"New Customer\" },\n      { name: \"Pre-Construction\", x: 69.0, y: 24.4, category: \"Pre-Construction\" },\n      { name: \"Construction\", x: 71.6, y: 65.4, category: \"Construction\" },\n      { name: \"Post Construction\", x: 86.6, y: 77.1, category: \"Post Construction\" }\n    ];\n  }\n  \n  generateSpirits() {\n    this.spirits = [];\n    \n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = (location.x / 100) * this.canvas.width;\n      const actualY = (location.y / 100) * this.canvas.height;\n      \n      // Find which difficulties have tasks at this location\n      const tasksAtLocation = this.hotPotatoes.filter(task => task.category === location.category);\n      \n      if (tasksAtLocation.length > 0) {\n        // Get the difficulty of the first task (or you could use most common, highest priority, etc.)\n        const taskDifficulty = tasksAtLocation[0].difficulty;\n        \n        // Only create one spirit - the one matching the task difficulty\n        this.spirits.push({\n          x: actualX,\n          y: actualY,\n          difficulty: taskDifficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025\n        });\n      }\n      // If no tasks at this location, no spirit is shown\n    });\n  }\n  \n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => \n      task.category === location.category && task.difficulty === difficulty\n    ).length;\n  }\n  \n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  \n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  \n  stop() {\n    this.isRunning = false;\n    // Clean up event listeners\n    this.canvas.removeEventListener('mousemove', this.bindEvents);\n    this.canvas.removeEventListener('mouseleave', this.bindEvents);\n  }\n  \n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw background only\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    // Draw location titles\n    this.locations.forEach((location, index) => {\n      // Convert percentages to actual pixels\n      const actualX = (location.x / 100) * this.canvas.width;\n      const actualY = (location.y / 100) * this.canvas.height;\n      \n      // Draw location title with background\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n      this.ctx.fillRect(actualX - 60, actualY - 80, 120, 25);\n      \n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(location.name, actualX, actualY - 67);\n    });\n    \n    // Draw spirits only - one per location based on actual task data\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      \n      if (spiritImage && spiritImage.complete && spiritImage.naturalWidth > 0) {\n        // Dynamic size based on hover state\n        const isHovered = this.hoveredSpirit === spirit;\n        const imageSize = isHovered ? 80 : 50; // 50px normal, 80px on hover\n        \n        // Use high-quality rendering\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n        \n        // Draw the spirit image (clean PNG without numbers)\n        this.ctx.drawImage(spiritImage, spirit.x - imageSize/2, spirit.y - imageSize/2, imageSize, imageSize);\n      }\n    });\n  }\n  \n  drawTaskModal() {\n    const task = this.selectedTask;\n    const modalWidth = 400;\n    const modalHeight = 300;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n    \n    // Modal background\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillRect(modalX, modalY, modalWidth, modalHeight);\n    this.ctx.strokeStyle = '#333';\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(modalX, modalY, modalWidth, modalHeight);\n    \n    // Task title\n    this.ctx.fillStyle = '#333';\n    this.ctx.font = 'bold 18px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(task.title, modalX + modalWidth/2, modalY + 40);\n    \n    // Task details\n    this.ctx.font = '14px Arial';\n    this.ctx.textAlign = 'left';\n    const details = [\n      `Category: ${task.category}`,\n      `Difficulty: ${task.difficulty}`,\n      `Value: ${task.value?.toLocaleString() || 0}`,\n      `Holder: ${this.teamStats[task.holder]?.name || 'Unknown'}`,\n      `Description: ${task.description || 'No description'}`\n    ];\n    \n    details.forEach((detail, index) => {\n      this.ctx.fillText(detail, modalX + 20, modalY + 80 + index * 25);\n    });\n    \n    // Buttons\n    const buttonY = modalY + modalHeight - 60;\n    const buttonHeight = 40;\n    \n    // Cook button (green)\n    this.ctx.fillStyle = '#4CAF50';\n    this.ctx.fillRect(modalX + 50, buttonY, 120, buttonHeight);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = 'bold 16px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('üç≥ Cook', modalX + 110, buttonY + 25);\n    \n    // Pass button (orange)\n    this.ctx.fillStyle = '#FF9800';\n    this.ctx.fillRect(modalX + 230, buttonY, 120, buttonHeight);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillText('üîÑ Pass', modalX + 290, buttonY + 25);\n  }\n  \n  drawPassModal() {\n    const modalWidth = 500;\n    const modalHeight = 400;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n    \n    // Modal background\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillRect(modalX, modalY, modalWidth, modalHeight);\n    this.ctx.strokeStyle = '#333';\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(modalX, modalY, modalWidth, modalHeight);\n    \n    // Title\n    this.ctx.fillStyle = '#333';\n    this.ctx.font = 'bold 18px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('Pass to Teammate', modalX + modalWidth/2, modalY + 40);\n    \n    // Draw teammate buttons\n    const teammates = Object.entries(this.teamStats).filter(([id]) => id !== this.currentUser);\n    const buttonWidth = 200;\n    const buttonHeight = 50;\n    const startY = modalY + 80;\n    \n    teammates.forEach(([id, stats], index) => {\n      const buttonX = modalX + 50 + (index % 2) * 220;\n      const buttonY = startY + Math.floor(index / 2) * 70;\n      \n      this.ctx.fillStyle = '#2196F3';\n      this.ctx.fillRect(buttonX, buttonY, buttonWidth, buttonHeight);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 14px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(`${stats.avatar} ${stats.name}`, buttonX + buttonWidth/2, buttonY + 30);\n    });\n    \n    // Cancel button\n    this.ctx.fillStyle = '#f44336';\n    this.ctx.fillRect(modalX + modalWidth/2 - 60, modalY + modalHeight - 60, 120, 40);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = 'bold 16px Arial';\n    this.ctx.fillText('Cancel', modalX + modalWidth/2, modalY + modalHeight - 35);\n  }\n  \n  handleModalClick(mouseX, mouseY) {\n    const modalWidth = 400;\n    const modalHeight = 300;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n    const buttonY = modalY + modalHeight - 60;\n    \n    // Check Cook button\n    if (mouseX >= modalX + 50 && mouseX <= modalX + 170 && \n        mouseY >= buttonY && mouseY <= buttonY + 40) {\n      this.handleCook();\n    }\n    \n    // Check Pass button  \n    if (mouseX >= modalX + 230 && mouseX <= modalX + 350 && \n        mouseY >= buttonY && mouseY <= buttonY + 40) {\n      this.showPassModal = true;\n      this.showTaskModal = false;\n    }\n  }\n  \n  handlePassModalClick(mouseX, mouseY) {\n    const modalWidth = 500;\n    const modalHeight = 400;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n    \n    // Check teammate buttons\n    const teammates = Object.entries(this.teamStats).filter(([id]) => id !== this.currentUser);\n    const buttonWidth = 200;\n    const buttonHeight = 50;\n    const startY = modalY + 80;\n    \n    teammates.forEach(([id, stats], index) => {\n      const buttonX = modalX + 50 + (index % 2) * 220;\n      const buttonY = startY + Math.floor(index / 2) * 70;\n      \n      if (mouseX >= buttonX && mouseX <= buttonX + buttonWidth && \n          mouseY >= buttonY && mouseY <= buttonY + buttonHeight) {\n        this.handlePass(id);\n      }\n    });\n    \n    // Check Cancel button\n    if (mouseX >= modalX + modalWidth/2 - 60 && mouseX <= modalX + modalWidth/2 + 60 && \n        mouseY >= modalY + modalHeight - 60 && mouseY <= modalY + modalHeight - 20) {\n      this.showPassModal = false;\n      this.showTaskModal = true;\n    }\n  }\n  \n  handleCook() {\n    if (this.selectedTask) {\n      // Earn cash based on task value\n      const earnedValue = this.selectedTask.value || 100;\n      this.updateScore(earnedValue / 10);\n      \n      // Complete the task through the callback\n      this.onTaskComplete(this.selectedTask);\n      \n      // Close modal and regenerate spirits\n      this.showTaskModal = false;\n      this.selectedTask = null;\n      this.generateSpirits();\n    }\n  }\n  \n  handlePass(toUserId) {\n    if (this.selectedTask) {\n      // Pass the task through the callback\n      this.onTaskClick(this.selectedTask);\n      \n      // Close modals\n      this.showPassModal = false;\n      this.showTaskModal = false;\n      this.selectedTask = null;\n    }\n  }\n  \n  getSpiritImage(difficulty) {\n    const imageMap = { common: 'spirit1', rare: 'spirit2', epic: 'spirit3' };\n    return this.images[imageMap[difficulty]];\n  }\n  \n  getSpiritColor(difficulty) {\n    const colorMap = { common: '#66B2FF', rare: '#9B59B6', epic: '#FF6B6B' };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  \n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\n\nexport default HotPotatoGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}