{"ast":null,"code":"class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.loadImages();\n    this.resizeCanvas();\n  }\n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png',\n      spirit3: 'myimages/spirit3.png'\n    };\n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  initializeLocations() {\n    // Original image: 1536×1024, Canvas: 800×400\n    // Scale factors: x = 800/1536 ≈ 0.52, y = 400/1024 ≈ 0.39\n    const scaleX = 800 / 1536;\n    const scaleY = 400 / 1024;\n    return [{\n      name: \"Sales Office\",\n      x: 320 * scaleX,\n      y: 780 * scaleY,\n      category: \"Sales\"\n    },\n    // (167, 304)\n    {\n      name: \"New Lead\",\n      x: 310 * scaleX,\n      y: 400 * scaleY,\n      category: \"New Lead\"\n    },\n    // (161, 156)\n    {\n      name: \"New Customer\",\n      x: 700 * scaleX,\n      y: 360 * scaleY,\n      category: \"New Customer\"\n    },\n    // (365, 140)\n    {\n      name: \"Pre-Construction\",\n      x: 1060 * scaleX,\n      y: 250 * scaleY,\n      category: \"Pre-Construction\"\n    },\n    // (552, 98)\n    {\n      name: \"Construction\",\n      x: 1100 * scaleX,\n      y: 670 * scaleY,\n      category: \"Construction\"\n    },\n    // (573, 261)\n    {\n      name: \"Post Construction\",\n      x: 1330 * scaleX,\n      y: 790 * scaleY,\n      category: \"Post Construction\"\n    } // (693, 308)\n    ];\n  }\n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    this.locations.forEach(location => {\n      difficulties.forEach((difficulty, index) => {\n        const angle = index * 120 * (Math.PI / 180);\n        this.spirits.push({\n          x: location.x + Math.cos(angle) * 60,\n          y: location.y + Math.sin(angle) * 60,\n          difficulty: difficulty,\n          location: location,\n          size: 20\n        });\n      });\n    });\n  }\n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => task.category === location.category && task.difficulty === difficulty).length;\n  }\n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  stop() {\n    this.isRunning = false;\n  }\n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw background\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    // Draw locations\n    this.locations.forEach((location, index) => {\n      const totalTasks = this.hotPotatoes.filter(task => task.category === location.category).length;\n\n      // Location circle\n      this.ctx.beginPath();\n      this.ctx.arc(location.x, location.y, 40, 0, Math.PI * 2);\n      this.ctx.fillStyle = totalTasks > 0 ? 'rgba(255, 204, 0, 0.5)' : 'rgba(100, 100, 100, 0.5)';\n      this.ctx.fill();\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n\n      // Location number\n      this.ctx.beginPath();\n      this.ctx.arc(location.x - 25, location.y - 25, 12, 0, Math.PI * 2);\n      this.ctx.fillStyle = '#000';\n      this.ctx.fill();\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText((index + 1).toString(), location.x - 25, location.y - 20);\n\n      // Task count\n      if (totalTasks > 0) {\n        this.ctx.beginPath();\n        this.ctx.arc(location.x + 25, location.y - 25, 15, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = 'bold 14px Arial';\n        this.ctx.fillText(totalTasks.toString(), location.x + 25, location.y - 20);\n      }\n\n      // Location name\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 11px Arial';\n      this.ctx.strokeStyle = '#000';\n      this.ctx.lineWidth = 3;\n      this.ctx.strokeText(location.name, location.x, location.y + 50);\n      this.ctx.fillText(location.name, location.x, location.y + 50);\n    });\n\n    // Draw spirits\n    this.spirits.forEach(spirit => {\n      const taskCount = this.getTaskCount(spirit.location, spirit.difficulty);\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      if (spiritImage) {\n        // Draw spirit image\n        this.ctx.drawImage(spiritImage, spirit.x - 20, spirit.y - 20, 40, 40);\n      } else {\n        // Fallback circle\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.getSpiritColor(spirit.difficulty);\n        this.ctx.fill();\n      }\n\n      // Task count on spirit\n      if (taskCount > 0) {\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x + 15, spirit.y - 15, 10, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.strokeStyle = '#fff';\n        this.ctx.lineWidth = 2;\n        this.ctx.stroke();\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = 'bold 10px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(taskCount.toString(), spirit.x + 15, spirit.y - 10);\n      }\n    });\n  }\n  getSpiritImage(difficulty) {\n    const imageMap = {\n      common: 'spirit1',\n      rare: 'spirit2',\n      epic: 'spirit3'\n    };\n    return this.images[imageMap[difficulty]];\n  }\n  getSpiritColor(difficulty) {\n    const colorMap = {\n      common: '#66B2FF',\n      rare: '#9B59B6',\n      epic: '#FF6B6B'\n    };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\nexport default HotPotatoGame;","map":{"version":3,"names":["HotPotatoGame","constructor","canvasId","gameState","updateScore","hotPotatoes","teamStats","currentUser","onTaskClick","onTaskComplete","canvas","document","getElementById","ctx","getContext","isRunning","spirits","locations","initializeLocations","loadImages","resizeCanvas","images","imageUrls","background","spirit1","spirit2","spirit3","key","url","Object","entries","img","Image","src","scaleX","scaleY","name","x","y","category","generateSpirits","difficulties","forEach","location","difficulty","index","angle","Math","PI","push","cos","sin","size","getTaskCount","filter","task","length","width","height","start","gameLoop","stop","render","clearRect","drawImage","totalTasks","beginPath","arc","fillStyle","fill","strokeStyle","lineWidth","stroke","font","textAlign","fillText","toString","strokeText","spirit","taskCount","spiritImage","getSpiritImage","getSpiritColor","imageMap","common","rare","epic","colorMap","requestAnimationFrame"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/game.js"],"sourcesContent":["class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    \n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.loadImages();\n    this.resizeCanvas();\n  }\n  \n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png', \n      spirit3: 'myimages/spirit3.png'\n    };\n    \n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  \n  initializeLocations() {\n    // Original image: 1536×1024, Canvas: 800×400\n    // Scale factors: x = 800/1536 ≈ 0.52, y = 400/1024 ≈ 0.39\n    const scaleX = 800 / 1536;\n    const scaleY = 400 / 1024;\n    \n    return [\n      { name: \"Sales Office\", x: 320 * scaleX, y: 780 * scaleY, category: \"Sales\" },           // (167, 304)\n      { name: \"New Lead\", x: 310 * scaleX, y: 400 * scaleY, category: \"New Lead\" },           // (161, 156)\n      { name: \"New Customer\", x: 700 * scaleX, y: 360 * scaleY, category: \"New Customer\" },   // (365, 140)\n      { name: \"Pre-Construction\", x: 1060 * scaleX, y: 250 * scaleY, category: \"Pre-Construction\" }, // (552, 98)\n      { name: \"Construction\", x: 1100 * scaleX, y: 670 * scaleY, category: \"Construction\" },   // (573, 261)\n      { name: \"Post Construction\", x: 1330 * scaleX, y: 790 * scaleY, category: \"Post Construction\" } // (693, 308)\n    ];\n  }\n  \n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    \n    this.locations.forEach(location => {\n      difficulties.forEach((difficulty, index) => {\n        const angle = (index * 120) * (Math.PI / 180);\n        this.spirits.push({\n          x: location.x + Math.cos(angle) * 60,\n          y: location.y + Math.sin(angle) * 60,\n          difficulty: difficulty,\n          location: location,\n          size: 20\n        });\n      });\n    });\n  }\n  \n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => \n      task.category === location.category && task.difficulty === difficulty\n    ).length;\n  }\n  \n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  \n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n  \n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw background\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    // Draw locations\n    this.locations.forEach((location, index) => {\n      const totalTasks = this.hotPotatoes.filter(task => task.category === location.category).length;\n      \n      // Location circle\n      this.ctx.beginPath();\n      this.ctx.arc(location.x, location.y, 40, 0, Math.PI * 2);\n      this.ctx.fillStyle = totalTasks > 0 ? 'rgba(255, 204, 0, 0.5)' : 'rgba(100, 100, 100, 0.5)';\n      this.ctx.fill();\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      \n      // Location number\n      this.ctx.beginPath();\n      this.ctx.arc(location.x - 25, location.y - 25, 12, 0, Math.PI * 2);\n      this.ctx.fillStyle = '#000';\n      this.ctx.fill();\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText((index + 1).toString(), location.x - 25, location.y - 20);\n      \n      // Task count\n      if (totalTasks > 0) {\n        this.ctx.beginPath();\n        this.ctx.arc(location.x + 25, location.y - 25, 15, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = 'bold 14px Arial';\n        this.ctx.fillText(totalTasks.toString(), location.x + 25, location.y - 20);\n      }\n      \n      // Location name\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 11px Arial';\n      this.ctx.strokeStyle = '#000';\n      this.ctx.lineWidth = 3;\n      this.ctx.strokeText(location.name, location.x, location.y + 50);\n      this.ctx.fillText(location.name, location.x, location.y + 50);\n    });\n    \n    // Draw spirits\n    this.spirits.forEach(spirit => {\n      const taskCount = this.getTaskCount(spirit.location, spirit.difficulty);\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      \n      if (spiritImage) {\n        // Draw spirit image\n        this.ctx.drawImage(spiritImage, spirit.x - 20, spirit.y - 20, 40, 40);\n      } else {\n        // Fallback circle\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.getSpiritColor(spirit.difficulty);\n        this.ctx.fill();\n      }\n      \n      // Task count on spirit\n      if (taskCount > 0) {\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x + 15, spirit.y - 15, 10, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.strokeStyle = '#fff';\n        this.ctx.lineWidth = 2;\n        this.ctx.stroke();\n        \n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = 'bold 10px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(taskCount.toString(), spirit.x + 15, spirit.y - 10);\n      }\n    });\n  }\n  \n  getSpiritImage(difficulty) {\n    const imageMap = { common: 'spirit1', rare: 'spirit2', epic: 'spirit3' };\n    return this.images[imageMap[difficulty]];\n  }\n  \n  getSpiritColor(difficulty) {\n    const colorMap = { common: '#66B2FF', rare: '#9B59B6', epic: '#FF6B6B' };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  \n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\n\nexport default HotPotatoGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}