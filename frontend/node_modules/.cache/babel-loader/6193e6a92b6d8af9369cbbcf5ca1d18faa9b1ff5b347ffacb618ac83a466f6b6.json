{"ast":null,"code":"class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    if (!this.canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n    this.ctx = this.canvas.getContext('2d');\n    this.gameState = gameState;\n    this.updateScore = updateScore;\n    this.hotPotatoes = hotPotatoes;\n    this.teamStats = teamStats;\n    this.currentUser = currentUser;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    this.isRunning = false;\n    this.animationId = null;\n    this.spirits = [];\n    this.particles = [];\n    this.locations = [];\n    this.selectedTask = null;\n    this.showTaskModal = false;\n\n    // Image assets\n    this.images = {};\n    this.imagesLoaded = false;\n    this.loadImages();\n    this.initializeLocations();\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.gameLoop = this.gameLoop.bind(this);\n    this.resizeCanvas();\n  }\n  async loadImages() {\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      // common\n      spirit2: 'myimages/spirit2.png',\n      // rare\n      spirit3: 'myimages/spirit3.png' // epic\n    };\n    const loadPromises = Object.entries(imageUrls).map(([key, url]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n          this.images[key] = img;\n          resolve();\n        };\n        img.onerror = () => {\n          console.warn(`Failed to load image: ${url}`);\n          // Create fallback for missing images\n          this.images[key] = null;\n          resolve();\n        };\n        img.src = url;\n      });\n    });\n    try {\n      await Promise.all(loadPromises);\n      this.imagesLoaded = true;\n      console.log('Images loaded successfully');\n    } catch (error) {\n      console.error('Error loading images:', error);\n      this.imagesLoaded = true; // Continue without images\n    }\n  }\n  initializeLocations() {\n    // Positioning based on the background image layout\n    this.locations = [{\n      name: \"Sales Office\",\n      x: 150,\n      y: 320,\n      radius: 40,\n      color: \"#FFCC00\",\n      tasks: [],\n      number: 1\n    },\n    // Bottom left house\n    {\n      name: \"New Lead\",\n      x: 250,\n      y: 250,\n      radius: 40,\n      color: \"#66B2FF\",\n      tasks: [],\n      number: 2\n    },\n    // Empty lot\n    {\n      name: \"New Customer\",\n      x: 350,\n      y: 200,\n      radius: 40,\n      color: \"#9B59B6\",\n      tasks: [],\n      number: 3\n    },\n    // Small house\n    {\n      name: \"Pre-Construction\",\n      x: 550,\n      y: 120,\n      radius: 40,\n      color: \"#2ECC71\",\n      tasks: [],\n      number: 4\n    },\n    // Big building with truck\n    {\n      name: \"Construction\",\n      x: 600,\n      y: 280,\n      radius: 40,\n      color: \"#FF6B6B\",\n      tasks: [],\n      number: 5\n    },\n    // Construction site with ladder\n    {\n      name: \"Post Construction\",\n      x: 700,\n      y: 320,\n      radius: 40,\n      color: \"#4A90E2\",\n      tasks: [],\n      number: 6\n    } // Happy family house\n    ];\n  }\n  resizeCanvas() {\n    const container = this.canvas.parentElement;\n    const rect = container.getBoundingClientRect();\n    this.canvas.width = Math.min(800, rect.width - 20);\n    this.canvas.height = 400;\n  }\n  start() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    this.canvas.addEventListener('click', this.handleClick);\n    document.addEventListener('keydown', this.handleKeyPress);\n    this.generateSpirits();\n    this.updateTaskLocations();\n    this.gameLoop();\n  }\n  stop() {\n    this.isRunning = false;\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n    this.canvas.removeEventListener('click', this.handleClick);\n    document.removeEventListener('keydown', this.handleKeyPress);\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Get difficulty distribution from current tasks\n  getDifficultyDistribution() {\n    const difficultyCount = {\n      common: 0,\n      rare: 0,\n      epic: 0\n    };\n    this.hotPotatoes.forEach(task => {\n      if (difficultyCount.hasOwnProperty(task.difficulty)) {\n        difficultyCount[task.difficulty]++;\n      }\n    });\n    return difficultyCount;\n  }\n\n  // Get task count for specific category and difficulty combination\n  getTaskCountByCategoyAndDifficulty(category, difficulty) {\n    return this.hotPotatoes.filter(task => {\n      const taskCategory = this.mapCategoryToLocation(task.category);\n      return taskCategory === category && task.difficulty === difficulty;\n    }).length;\n  }\n\n  // Map task categories to location names\n  mapCategoryToLocation(taskCategory) {\n    switch (taskCategory) {\n      case 'Sales':\n        return \"Sales Office\";\n      case 'New Lead':\n        return \"New Lead\";\n      case 'New Customer':\n        return \"New Customer\";\n      case 'Construction':\n        return \"Construction\";\n      case 'Post Construction':\n        return \"Post Construction\";\n      case 'Pre-Construction':\n        return \"Pre-Construction\";\n      default:\n        return \"Sales Office\";\n      // Default fallback\n    }\n  }\n\n  // Get the nearest location for a spirit\n  getNearestLocationForSpirit(spirit) {\n    let nearestLocation = null;\n    let minDistance = Infinity;\n    for (let location of this.locations) {\n      const distance = Math.sqrt((spirit.x - location.x) ** 2 + (spirit.y - location.y) ** 2);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestLocation = location;\n      }\n    }\n    return nearestLocation;\n  }\n  generateSpirits() {\n    this.spirits = [];\n    const difficultyCount = this.getDifficultyDistribution();\n    const totalTasks = this.hotPotatoes.length;\n\n    // Calculate how many spirits of each type to create\n    const maxSpirits = Math.min(12, Math.max(4, Math.floor(totalTasks / 3)));\n    const totalDifficultyTasks = difficultyCount.common + difficultyCount.rare + difficultyCount.epic;\n    let spiritTypes = [];\n    if (totalDifficultyTasks > 0) {\n      // Create spirits proportional to task difficulties\n      const commonSpirits = Math.floor(difficultyCount.common / totalDifficultyTasks * maxSpirits);\n      const rareSpirits = Math.floor(difficultyCount.rare / totalDifficultyTasks * maxSpirits);\n      const epicSpirits = Math.floor(difficultyCount.epic / totalDifficultyTasks * maxSpirits);\n\n      // Fill the array with difficulty types\n      for (let i = 0; i < commonSpirits; i++) spiritTypes.push('common');\n      for (let i = 0; i < rareSpirits; i++) spiritTypes.push('rare');\n      for (let i = 0; i < epicSpirits; i++) spiritTypes.push('epic');\n\n      // Fill remaining slots randomly if needed\n      const remaining = maxSpirits - spiritTypes.length;\n      const difficulties = ['common', 'rare', 'epic'];\n      for (let i = 0; i < remaining; i++) {\n        spiritTypes.push(difficulties[Math.floor(Math.random() * difficulties.length)]);\n      }\n    } else {\n      // Default distribution if no tasks\n      for (let i = 0; i < maxSpirits; i++) {\n        spiritTypes.push(['common', 'rare', 'epic'][Math.floor(Math.random() * 3)]);\n      }\n    }\n\n    // Create spirits based on the distribution\n    spiritTypes.forEach((difficulty, i) => {\n      this.spirits.push({\n        x: Math.random() * (this.canvas.width - 60) + 30,\n        y: Math.random() * (this.canvas.height - 60) + 30,\n        vx: (Math.random() - 0.5) * 2,\n        vy: (Math.random() - 0.5) * 2,\n        size: this.getSpiritSizeByDifficulty(difficulty),\n        difficulty: difficulty,\n        color: this.getSpiritColorByDifficulty(difficulty),\n        glow: Math.random() * 15 + 10,\n        pulsePhase: Math.random() * Math.PI * 2,\n        id: i,\n        energy: Math.random() * 100 + 50\n      });\n    });\n  }\n  getSpiritSizeByDifficulty(difficulty) {\n    switch (difficulty) {\n      case 'common':\n        return 12 + Math.random() * 6;\n      // 12-18px\n      case 'rare':\n        return 16 + Math.random() * 8;\n      // 16-24px\n      case 'epic':\n        return 20 + Math.random() * 10;\n      // 20-30px\n      default:\n        return 15 + Math.random() * 10;\n    }\n  }\n  getSpiritColorByDifficulty(difficulty) {\n    switch (difficulty) {\n      case 'common':\n        return '#66B2FF';\n      // Blue\n      case 'rare':\n        return '#9B59B6';\n      // Purple\n      case 'epic':\n        return '#FF6B6B';\n      // Red/Orange\n      default:\n        return `hsl(${Math.random() * 360}, 70%, 60%)`;\n    }\n  }\n  getSpiritImageByDifficulty(difficulty) {\n    switch (difficulty) {\n      case 'common':\n        return this.images.spirit1;\n      // spirit1.png\n      case 'rare':\n        return this.images.spirit2;\n      // spirit2.png\n      case 'epic':\n        return this.images.spirit3;\n      // spirit3.png\n      default:\n        return null;\n    }\n  }\n  updateTaskLocations() {\n    // Clear existing task assignments\n    this.locations.forEach(loc => loc.tasks = []);\n\n    // Distribute tasks to locations based on category\n    this.hotPotatoes.forEach(task => {\n      let targetLocation;\n      switch (task.category) {\n        case 'Sales':\n          targetLocation = this.locations.find(l => l.name === \"Sales Office\");\n          break;\n        case 'New Lead':\n          targetLocation = this.locations.find(l => l.name === \"New Lead\");\n          break;\n        case 'New Customer':\n          targetLocation = this.locations.find(l => l.name === \"New Customer\");\n          break;\n        case 'Construction':\n          targetLocation = this.locations.find(l => l.name === \"Construction\");\n          break;\n        case 'Post Construction':\n          targetLocation = this.locations.find(l => l.name === \"Post Construction\");\n          break;\n        case 'Pre-Construction':\n          targetLocation = this.locations.find(l => l.name === \"Pre-Construction\");\n          break;\n        default:\n          targetLocation = this.locations.find(l => l.name === \"Sales Office\");\n      }\n      if (targetLocation) {\n        targetLocation.tasks.push(task);\n      }\n    });\n  }\n  handleClick(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    for (let spirit of this.spirits) {\n      const distance = Math.sqrt((x - spirit.x) ** 2 + (y - spirit.y) ** 2);\n      if (distance < spirit.size) {\n        this.handleSpiritClick(spirit);\n        return;\n      }\n    }\n    for (let location of this.locations) {\n      const distance = Math.sqrt((x - location.x) ** 2 + (y - location.y) ** 2);\n      if (distance < location.radius && location.tasks.length > 0) {\n        this.handleLocationClick(location);\n        return;\n      }\n    }\n  }\n  handleSpiritClick(spirit) {\n    let nearestLocation = null;\n    let minDistance = Infinity;\n    for (let location of this.locations) {\n      if (location.tasks.length > 0) {\n        const distance = Math.sqrt((spirit.x - location.x) ** 2 + (spirit.y - location.y) ** 2);\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestLocation = location;\n        }\n      }\n    }\n    if (nearestLocation) {\n      this.handleLocationClick(nearestLocation);\n    }\n\n    // Score based on spirit difficulty\n    const scoreMap = {\n      common: 10,\n      rare: 20,\n      epic: 30\n    };\n    const score = scoreMap[spirit.difficulty] || 10;\n    this.updateScore(score);\n    this.createParticles(spirit.x, spirit.y, `+${score}`, spirit.color);\n  }\n  handleLocationClick(location) {\n    if (location.tasks.length === 0) return;\n    const task = location.tasks[0];\n    this.selectedTask = task;\n    this.showTaskModal = true;\n    this.updateScore(25);\n    this.createParticles(location.x, location.y, \"+25\", \"#66B2FF\");\n  }\n  handleKeyPress(event) {\n    if (event.key === 'Escape') {\n      this.showTaskModal = false;\n      this.selectedTask = null;\n    }\n  }\n  createParticles(x, y, text, color) {\n    for (let i = 0; i < 5; i++) {\n      this.particles.push({\n        x: x + (Math.random() - 0.5) * 20,\n        y: y + (Math.random() - 0.5) * 20,\n        vx: (Math.random() - 0.5) * 4,\n        vy: -Math.random() * 3 - 1,\n        life: 60,\n        maxLife: 60,\n        color: color,\n        text: i === 0 ? text : null,\n        size: 4 + Math.random() * 4\n      });\n    }\n  }\n  updateSpirits() {\n    this.spirits.forEach(spirit => {\n      spirit.x += spirit.vx;\n      spirit.y += spirit.vy;\n      if (spirit.x <= spirit.size || spirit.x >= this.canvas.width - spirit.size) {\n        spirit.vx *= -0.8;\n        spirit.x = Math.max(spirit.size, Math.min(this.canvas.width - spirit.size, spirit.x));\n      }\n      if (spirit.y <= spirit.size || spirit.y >= this.canvas.height - spirit.size) {\n        spirit.vy *= -0.8;\n        spirit.y = Math.max(spirit.size, Math.min(this.canvas.height - spirit.size, spirit.y));\n      }\n      spirit.pulsePhase += 0.1;\n      spirit.currentGlow = spirit.glow + Math.sin(spirit.pulsePhase) * 5;\n      for (let location of this.locations) {\n        if (location.tasks.length > 0) {\n          const dx = location.x - spirit.x;\n          const dy = location.y - spirit.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance > 0 && distance < 150) {\n            const force = 0.02 / distance;\n            spirit.vx += dx / distance * force;\n            spirit.vy += dy / distance * force;\n          }\n        }\n      }\n      spirit.vx *= 0.99;\n      spirit.vy *= 0.99;\n    });\n  }\n  updateParticles() {\n    this.particles = this.particles.filter(particle => {\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      particle.vy += 0.1;\n      particle.life--;\n      return particle.life > 0;\n    });\n  }\n  render() {\n    // Draw background\n    if (this.images.background && this.imagesLoaded) {\n      // Scale background to fit canvas\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n\n      // Add slight overlay for better visibility\n      this.ctx.fillStyle = 'rgba(0, 20, 40, 0.3)';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    } else {\n      // Fallback background\n      this.ctx.fillStyle = 'rgba(0, 20, 40, 0.1)';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    // Draw locations\n    this.locations.forEach(location => {\n      const taskCount = location.tasks.length;\n      this.ctx.beginPath();\n      this.ctx.arc(location.x, location.y, location.radius, 0, Math.PI * 2);\n      this.ctx.fillStyle = taskCount > 0 ? location.color : '#444';\n      this.ctx.fill();\n      this.ctx.strokeStyle = taskCount > 0 ? '#fff' : '#666';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      if (taskCount > 0) {\n        this.ctx.beginPath();\n        this.ctx.arc(location.x + 35, location.y - 35, 15, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = 'bold 14px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(taskCount.toString(), location.x + 35, location.y - 30);\n      }\n      this.ctx.fillStyle = taskCount > 0 ? '#fff' : '#999';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(location.name, location.x, location.y + 5);\n    });\n\n    // Draw spirits\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImageByDifficulty(spirit.difficulty);\n      if (spiritImage && this.imagesLoaded) {\n        // Draw glow effect behind image\n        const gradient = this.ctx.createRadialGradient(spirit.x, spirit.y, 0, spirit.x, spirit.y, spirit.size + spirit.currentGlow);\n        gradient.addColorStop(0, spirit.color + '80');\n        gradient.addColorStop(1, 'transparent');\n        this.ctx.fillStyle = gradient;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size + spirit.currentGlow, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        // Draw sprite image\n        const imageSize = spirit.size * 2;\n        this.ctx.drawImage(spiritImage, spirit.x - imageSize / 2, spirit.y - imageSize / 2, imageSize, imageSize);\n\n        // Draw red circle with task count for this spirit's difficulty and nearest location\n        const nearestLocation = this.getNearestLocationForSpirit(spirit);\n        if (nearestLocation) {\n          const taskCount = this.getTaskCountByCategoyAndDifficulty(nearestLocation.name, spirit.difficulty);\n          if (taskCount > 0) {\n            // Red circle background\n            this.ctx.beginPath();\n            this.ctx.arc(spirit.x + spirit.size - 5, spirit.y - spirit.size + 5, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = '#FF6B6B';\n            this.ctx.fill();\n\n            // White border\n            this.ctx.strokeStyle = '#fff';\n            this.ctx.lineWidth = 2;\n            this.ctx.stroke();\n\n            // Task count text\n            this.ctx.fillStyle = '#fff';\n            this.ctx.font = 'bold 10px Arial';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(taskCount.toString(), spirit.x + spirit.size - 5, spirit.y - spirit.size + 9);\n          }\n        }\n      } else {\n        // Fallback: draw colored circle with face\n        const gradient = this.ctx.createRadialGradient(spirit.x, spirit.y, 0, spirit.x, spirit.y, spirit.size + spirit.currentGlow);\n        gradient.addColorStop(0, spirit.color);\n        gradient.addColorStop(1, 'transparent');\n        this.ctx.fillStyle = gradient;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size + spirit.currentGlow, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.fillStyle = spirit.color;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size, 0, Math.PI * 2);\n        this.ctx.fill();\n\n        // Draw face\n        this.ctx.fillStyle = '#fff';\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x - 5, spirit.y - 3, 2, 0, Math.PI * 2);\n        this.ctx.arc(spirit.x + 5, spirit.y - 3, 2, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.strokeStyle = '#fff';\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y + 3, 4, 0, Math.PI);\n        this.ctx.stroke();\n\n        // Draw red circle with task count for fallback spirits too\n        const nearestLocation = this.getNearestLocationForSpirit(spirit);\n        if (nearestLocation) {\n          const taskCount = this.getTaskCountByCategoyAndDifficulty(nearestLocation.name, spirit.difficulty);\n          if (taskCount > 0) {\n            // Red circle background\n            this.ctx.beginPath();\n            this.ctx.arc(spirit.x + spirit.size - 5, spirit.y - spirit.size + 5, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = '#FF6B6B';\n            this.ctx.fill();\n\n            // White border\n            this.ctx.strokeStyle = '#fff';\n            this.ctx.lineWidth = 2;\n            this.ctx.stroke();\n\n            // Task count text\n            this.ctx.fillStyle = '#fff';\n            this.ctx.font = 'bold 10px Arial';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(taskCount.toString(), spirit.x + spirit.size - 5, spirit.y - spirit.size + 9);\n          }\n        }\n      }\n    });\n\n    // Draw particles\n    this.particles.forEach(particle => {\n      const alpha = particle.life / particle.maxLife;\n      this.ctx.fillStyle = particle.color + Math.floor(alpha * 255).toString(16).padStart(2, '0');\n      if (particle.text) {\n        this.ctx.font = 'bold 16px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(particle.text, particle.x, particle.y);\n      } else {\n        this.ctx.beginPath();\n        this.ctx.arc(particle.x, particle.y, particle.size * alpha, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n    });\n\n    // Draw task modal\n    if (this.showTaskModal && this.selectedTask) {\n      this.drawTaskModal();\n    }\n\n    // Draw instructions\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    this.ctx.fillRect(10, this.canvas.height - 50, this.canvas.width - 20, 40);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = '14px Arial';\n    this.ctx.textAlign = 'left';\n    this.ctx.fillText('Click spirits or locations to interact • Spirits show task difficulty • ESC to close modal', 20, this.canvas.height - 25);\n  }\n  drawTaskModal() {\n    var _task$value, _this$teamStats$task$;\n    const task = this.selectedTask;\n    if (!task) return;\n    const modalWidth = 350;\n    const modalHeight = 250;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n\n    // Modal background with gradient\n    const gradient = this.ctx.createLinearGradient(modalX, modalY, modalX, modalY + modalHeight);\n    gradient.addColorStop(0, 'rgba(0, 44, 84, 0.98)');\n    gradient.addColorStop(1, 'rgba(0, 20, 40, 0.98)');\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(modalX, modalY, modalWidth, modalHeight);\n\n    // Modal border with temperature-based color\n    const temp = task.temperature || 0;\n    let borderColor = '#66B2FF';\n    if (temp > 80) borderColor = '#FF6B6B';else if (temp > 60) borderColor = '#FFCC00';\n    this.ctx.strokeStyle = borderColor;\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeRect(modalX, modalY, modalWidth, modalHeight);\n\n    // Task title\n    this.ctx.fillStyle = '#FFCC00';\n    this.ctx.font = 'bold 18px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(task.title, modalX + modalWidth / 2, modalY + 35);\n\n    // Difficulty and temperature indicators\n    const difficultyEmoji = task.difficulty === 'epic' ? '🔥' : task.difficulty === 'rare' ? '⚡' : '💎';\n    const tempEmoji = temp > 80 ? '🔥' : temp > 60 ? '🌶️' : temp > 40 ? '♨️' : '🫖';\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = '20px Arial';\n    this.ctx.fillText(`${difficultyEmoji} ${tempEmoji}`, modalX + modalWidth - 50, modalY + 35);\n\n    // Task details\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = '14px Arial';\n    this.ctx.textAlign = 'left';\n    const details = [`Category: ${task.category}`, `Difficulty: ${task.difficulty}`, `Value: ${((_task$value = task.value) === null || _task$value === void 0 ? void 0 : _task$value.toLocaleString()) || 0}`, `Holder: ${((_this$teamStats$task$ = this.teamStats[task.holder]) === null || _this$teamStats$task$ === void 0 ? void 0 : _this$teamStats$task$.name) || 'Unknown'}`, `Temperature: ${Math.round(temp)}°`, `Time Left: ${task.timeLeft || 0}s`, `Passes: ${task.passCount || 0}`];\n    details.forEach((detail, index) => {\n      this.ctx.fillText(detail, modalX + 20, modalY + 65 + index * 20);\n    });\n\n    // Progress bar for temperature\n    const barWidth = modalWidth - 40;\n    const barHeight = 8;\n    const barX = modalX + 20;\n    const barY = modalY + 210;\n\n    // Background bar\n    this.ctx.fillStyle = '#333';\n    this.ctx.fillRect(barX, barY, barWidth, barHeight);\n\n    // Temperature bar\n    this.ctx.fillStyle = temp > 80 ? '#FF6B6B' : temp > 60 ? '#FFCC00' : '#66B2FF';\n    this.ctx.fillRect(barX, barY, barWidth * temp / 100, barHeight);\n\n    // Action buttons\n    const isMyTask = task.holder === this.currentUser;\n    if (isMyTask) {\n      // Pass button\n      this.ctx.fillStyle = '#FFCC00';\n      this.ctx.fillRect(modalX + 20, modalY + 220, 100, 25);\n      this.ctx.fillStyle = '#000';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('Pass Task', modalX + 70, modalY + 237);\n\n      // Complete button\n      this.ctx.fillStyle = '#2ECC71';\n      this.ctx.fillRect(modalX + 130, modalY + 220, 100, 25);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.fillText('Complete', modalX + 180, modalY + 237);\n\n      // Close button\n      this.ctx.fillStyle = '#FF6B6B';\n      this.ctx.fillRect(modalX + 240, modalY + 220, 80, 25);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.fillText('Close', modalX + 280, modalY + 237);\n    } else {\n      // Just close button for tasks not owned by current user\n      this.ctx.fillStyle = '#FF6B6B';\n      this.ctx.fillRect(modalX + modalWidth / 2 - 40, modalY + 220, 80, 25);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('Close', modalX + modalWidth / 2, modalY + 237);\n    }\n\n    // Handle button clicks (add event listener if not already added)\n    if (!this.modalClickHandler) {\n      this.modalClickHandler = event => {\n        if (!this.showTaskModal) return;\n        const rect = this.canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        if (y >= modalY + 220 && y <= modalY + 245) {\n          if (isMyTask) {\n            if (x >= modalX + 20 && x <= modalX + 120) {\n              // Pass button clicked\n              this.onTaskClick(task);\n              this.showTaskModal = false;\n              this.selectedTask = null;\n            } else if (x >= modalX + 130 && x <= modalX + 230) {\n              // Complete button clicked\n              this.onTaskComplete(task);\n              this.showTaskModal = false;\n              this.selectedTask = null;\n              this.updateTaskLocations();\n              this.generateSpirits(); // Regenerate spirits when tasks change\n            } else if (x >= modalX + 240 && x <= modalX + 320) {\n              // Close button clicked\n              this.showTaskModal = false;\n              this.selectedTask = null;\n            }\n          } else {\n            if (x >= modalX + modalWidth / 2 - 40 && x <= modalX + modalWidth / 2 + 40) {\n              // Close button clicked\n              this.showTaskModal = false;\n              this.selectedTask = null;\n            }\n          }\n        }\n      };\n      this.canvas.addEventListener('click', this.modalClickHandler);\n    }\n  }\n  gameLoop() {\n    if (!this.isRunning) return;\n    this.updateSpirits();\n    this.updateParticles();\n    this.updateTaskLocations();\n    this.render();\n    this.animationId = requestAnimationFrame(this.gameLoop);\n  }\n}\nexport default HotPotatoGame;","map":{"version":3,"names":["HotPotatoGame","constructor","canvasId","gameState","updateScore","hotPotatoes","teamStats","currentUser","onTaskClick","onTaskComplete","canvas","document","getElementById","console","error","ctx","getContext","isRunning","animationId","spirits","particles","locations","selectedTask","showTaskModal","images","imagesLoaded","loadImages","initializeLocations","handleClick","bind","handleKeyPress","gameLoop","resizeCanvas","imageUrls","background","spirit1","spirit2","spirit3","loadPromises","Object","entries","map","key","url","Promise","resolve","reject","img","Image","onload","onerror","warn","src","all","log","name","x","y","radius","color","tasks","number","container","parentElement","rect","getBoundingClientRect","width","Math","min","height","start","addEventListener","generateSpirits","updateTaskLocations","stop","cancelAnimationFrame","removeEventListener","clearRect","getDifficultyDistribution","difficultyCount","common","rare","epic","forEach","task","hasOwnProperty","difficulty","getTaskCountByCategoyAndDifficulty","category","filter","taskCategory","mapCategoryToLocation","length","getNearestLocationForSpirit","spirit","nearestLocation","minDistance","Infinity","location","distance","sqrt","totalTasks","maxSpirits","max","floor","totalDifficultyTasks","spiritTypes","commonSpirits","rareSpirits","epicSpirits","i","push","remaining","difficulties","random","vx","vy","size","getSpiritSizeByDifficulty","getSpiritColorByDifficulty","glow","pulsePhase","PI","id","energy","getSpiritImageByDifficulty","loc","targetLocation","find","l","event","clientX","left","clientY","top","handleSpiritClick","handleLocationClick","scoreMap","score","createParticles","text","life","maxLife","updateSpirits","currentGlow","sin","dx","dy","force","updateParticles","particle","render","drawImage","fillStyle","fillRect","taskCount","beginPath","arc","fill","strokeStyle","lineWidth","stroke","font","textAlign","fillText","toString","spiritImage","gradient","createRadialGradient","addColorStop","imageSize","alpha","padStart","drawTaskModal","_task$value","_this$teamStats$task$","modalWidth","modalHeight","modalX","modalY","createLinearGradient","temp","temperature","borderColor","strokeRect","title","difficultyEmoji","tempEmoji","details","value","toLocaleString","holder","round","timeLeft","passCount","detail","index","barWidth","barHeight","barX","barY","isMyTask","modalClickHandler","requestAnimationFrame"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/data/tasks.js"],"sourcesContent":["class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    if (!this.canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n    \n    this.ctx = this.canvas.getContext('2d');\n    this.gameState = gameState;\n    this.updateScore = updateScore;\n    this.hotPotatoes = hotPotatoes;\n    this.teamStats = teamStats;\n    this.currentUser = currentUser;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    \n    this.isRunning = false;\n    this.animationId = null;\n    this.spirits = [];\n    this.particles = [];\n    this.locations = [];\n    this.selectedTask = null;\n    this.showTaskModal = false;\n    \n    // Image assets\n    this.images = {};\n    this.imagesLoaded = false;\n    this.loadImages();\n    \n    this.initializeLocations();\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.gameLoop = this.gameLoop.bind(this);\n    this.resizeCanvas();\n  }\n  \n  async loadImages() {\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png', // common\n      spirit2: 'myimages/spirit2.png', // rare\n      spirit3: 'myimages/spirit3.png'  // epic\n    };\n    \n    const loadPromises = Object.entries(imageUrls).map(([key, url]) => {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n          this.images[key] = img;\n          resolve();\n        };\n        img.onerror = () => {\n          console.warn(`Failed to load image: ${url}`);\n          // Create fallback for missing images\n          this.images[key] = null;\n          resolve();\n        };\n        img.src = url;\n      });\n    });\n    \n    try {\n      await Promise.all(loadPromises);\n      this.imagesLoaded = true;\n      console.log('Images loaded successfully');\n    } catch (error) {\n      console.error('Error loading images:', error);\n      this.imagesLoaded = true; // Continue without images\n    }\n  }\n  \n  initializeLocations() {\n    // Positioning based on the background image layout\n    this.locations = [\n      { name: \"Sales Office\", x: 150, y: 320, radius: 40, color: \"#FFCC00\", tasks: [], number: 1 }, // Bottom left house\n      { name: \"New Lead\", x: 250, y: 250, radius: 40, color: \"#66B2FF\", tasks: [], number: 2 }, // Empty lot\n      { name: \"New Customer\", x: 350, y: 200, radius: 40, color: \"#9B59B6\", tasks: [], number: 3 }, // Small house\n      { name: \"Pre-Construction\", x: 550, y: 120, radius: 40, color: \"#2ECC71\", tasks: [], number: 4 }, // Big building with truck\n      { name: \"Construction\", x: 600, y: 280, radius: 40, color: \"#FF6B6B\", tasks: [], number: 5 }, // Construction site with ladder\n      { name: \"Post Construction\", x: 700, y: 320, radius: 40, color: \"#4A90E2\", tasks: [], number: 6 } // Happy family house\n    ];\n  }\n  \n  resizeCanvas() {\n    const container = this.canvas.parentElement;\n    const rect = container.getBoundingClientRect();\n    this.canvas.width = Math.min(800, rect.width - 20);\n    this.canvas.height = 400;\n  }\n  \n  start() {\n    if (this.isRunning) return;\n    this.isRunning = true;\n    this.canvas.addEventListener('click', this.handleClick);\n    document.addEventListener('keydown', this.handleKeyPress);\n    this.generateSpirits();\n    this.updateTaskLocations();\n    this.gameLoop();\n  }\n  \n  stop() {\n    this.isRunning = false;\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n    this.canvas.removeEventListener('click', this.handleClick);\n    document.removeEventListener('keydown', this.handleKeyPress);\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n  \n  // Get difficulty distribution from current tasks\n  getDifficultyDistribution() {\n    const difficultyCount = { common: 0, rare: 0, epic: 0 };\n    \n    this.hotPotatoes.forEach(task => {\n      if (difficultyCount.hasOwnProperty(task.difficulty)) {\n        difficultyCount[task.difficulty]++;\n      }\n    });\n    \n    return difficultyCount;\n  }\n\n  // Get task count for specific category and difficulty combination\n  getTaskCountByCategoyAndDifficulty(category, difficulty) {\n    return this.hotPotatoes.filter(task => {\n      const taskCategory = this.mapCategoryToLocation(task.category);\n      return taskCategory === category && task.difficulty === difficulty;\n    }).length;\n  }\n\n  // Map task categories to location names\n  mapCategoryToLocation(taskCategory) {\n    switch(taskCategory) {\n      case 'Sales':\n        return \"Sales Office\";\n      case 'New Lead':\n        return \"New Lead\";\n      case 'New Customer':\n        return \"New Customer\";\n      case 'Construction':\n        return \"Construction\";\n      case 'Post Construction':\n        return \"Post Construction\";\n      case 'Pre-Construction':\n        return \"Pre-Construction\";\n      default:\n        return \"Sales Office\"; // Default fallback\n    }\n  }\n\n  // Get the nearest location for a spirit\n  getNearestLocationForSpirit(spirit) {\n    let nearestLocation = null;\n    let minDistance = Infinity;\n    \n    for (let location of this.locations) {\n      const distance = Math.sqrt((spirit.x - location.x) ** 2 + (spirit.y - location.y) ** 2);\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearestLocation = location;\n      }\n    }\n    \n    return nearestLocation;\n  }\n  \n  generateSpirits() {\n    this.spirits = [];\n    const difficultyCount = this.getDifficultyDistribution();\n    const totalTasks = this.hotPotatoes.length;\n    \n    // Calculate how many spirits of each type to create\n    const maxSpirits = Math.min(12, Math.max(4, Math.floor(totalTasks / 3)));\n    const totalDifficultyTasks = difficultyCount.common + difficultyCount.rare + difficultyCount.epic;\n    \n    let spiritTypes = [];\n    \n    if (totalDifficultyTasks > 0) {\n      // Create spirits proportional to task difficulties\n      const commonSpirits = Math.floor((difficultyCount.common / totalDifficultyTasks) * maxSpirits);\n      const rareSpirits = Math.floor((difficultyCount.rare / totalDifficultyTasks) * maxSpirits);\n      const epicSpirits = Math.floor((difficultyCount.epic / totalDifficultyTasks) * maxSpirits);\n      \n      // Fill the array with difficulty types\n      for (let i = 0; i < commonSpirits; i++) spiritTypes.push('common');\n      for (let i = 0; i < rareSpirits; i++) spiritTypes.push('rare');\n      for (let i = 0; i < epicSpirits; i++) spiritTypes.push('epic');\n      \n      // Fill remaining slots randomly if needed\n      const remaining = maxSpirits - spiritTypes.length;\n      const difficulties = ['common', 'rare', 'epic'];\n      for (let i = 0; i < remaining; i++) {\n        spiritTypes.push(difficulties[Math.floor(Math.random() * difficulties.length)]);\n      }\n    } else {\n      // Default distribution if no tasks\n      for (let i = 0; i < maxSpirits; i++) {\n        spiritTypes.push(['common', 'rare', 'epic'][Math.floor(Math.random() * 3)]);\n      }\n    }\n    \n    // Create spirits based on the distribution\n    spiritTypes.forEach((difficulty, i) => {\n      this.spirits.push({\n        x: Math.random() * (this.canvas.width - 60) + 30,\n        y: Math.random() * (this.canvas.height - 60) + 30,\n        vx: (Math.random() - 0.5) * 2,\n        vy: (Math.random() - 0.5) * 2,\n        size: this.getSpiritSizeByDifficulty(difficulty),\n        difficulty: difficulty,\n        color: this.getSpiritColorByDifficulty(difficulty),\n        glow: Math.random() * 15 + 10,\n        pulsePhase: Math.random() * Math.PI * 2,\n        id: i,\n        energy: Math.random() * 100 + 50\n      });\n    });\n  }\n  \n  getSpiritSizeByDifficulty(difficulty) {\n    switch(difficulty) {\n      case 'common': return 12 + Math.random() * 6;  // 12-18px\n      case 'rare': return 16 + Math.random() * 8;    // 16-24px\n      case 'epic': return 20 + Math.random() * 10;   // 20-30px\n      default: return 15 + Math.random() * 10;\n    }\n  }\n  \n  getSpiritColorByDifficulty(difficulty) {\n    switch(difficulty) {\n      case 'common': return '#66B2FF';  // Blue\n      case 'rare': return '#9B59B6';    // Purple\n      case 'epic': return '#FF6B6B';    // Red/Orange\n      default: return `hsl(${Math.random() * 360}, 70%, 60%)`;\n    }\n  }\n  \n  getSpiritImageByDifficulty(difficulty) {\n    switch(difficulty) {\n      case 'common': return this.images.spirit1;  // spirit1.png\n      case 'rare': return this.images.spirit2;    // spirit2.png\n      case 'epic': return this.images.spirit3;    // spirit3.png\n      default: return null;\n    }\n  }\n  \n  updateTaskLocations() {\n    // Clear existing task assignments\n    this.locations.forEach(loc => loc.tasks = []);\n    \n    // Distribute tasks to locations based on category\n    this.hotPotatoes.forEach(task => {\n      let targetLocation;\n      \n      switch(task.category) {\n        case 'Sales':\n          targetLocation = this.locations.find(l => l.name === \"Sales Office\");\n          break;\n        case 'New Lead':\n          targetLocation = this.locations.find(l => l.name === \"New Lead\");\n          break;\n        case 'New Customer':\n          targetLocation = this.locations.find(l => l.name === \"New Customer\");\n          break;\n        case 'Construction':\n          targetLocation = this.locations.find(l => l.name === \"Construction\");\n          break;\n        case 'Post Construction':\n          targetLocation = this.locations.find(l => l.name === \"Post Construction\");\n          break;\n        case 'Pre-Construction':\n          targetLocation = this.locations.find(l => l.name === \"Pre-Construction\");\n          break;\n        default:\n          targetLocation = this.locations.find(l => l.name === \"Sales Office\");\n      }\n      \n      if (targetLocation) {\n        targetLocation.tasks.push(task);\n      }\n    });\n  }\n  \n  handleClick(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    for (let spirit of this.spirits) {\n      const distance = Math.sqrt((x - spirit.x) ** 2 + (y - spirit.y) ** 2);\n      if (distance < spirit.size) {\n        this.handleSpiritClick(spirit);\n        return;\n      }\n    }\n    \n    for (let location of this.locations) {\n      const distance = Math.sqrt((x - location.x) ** 2 + (y - location.y) ** 2);\n      if (distance < location.radius && location.tasks.length > 0) {\n        this.handleLocationClick(location);\n        return;\n      }\n    }\n  }\n  \n  handleSpiritClick(spirit) {\n    let nearestLocation = null;\n    let minDistance = Infinity;\n    \n    for (let location of this.locations) {\n      if (location.tasks.length > 0) {\n        const distance = Math.sqrt((spirit.x - location.x) ** 2 + (spirit.y - location.y) ** 2);\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestLocation = location;\n        }\n      }\n    }\n    \n    if (nearestLocation) {\n      this.handleLocationClick(nearestLocation);\n    }\n    \n    // Score based on spirit difficulty\n    const scoreMap = { common: 10, rare: 20, epic: 30 };\n    const score = scoreMap[spirit.difficulty] || 10;\n    \n    this.updateScore(score);\n    this.createParticles(spirit.x, spirit.y, `+${score}`, spirit.color);\n  }\n  \n  handleLocationClick(location) {\n    if (location.tasks.length === 0) return;\n    \n    const task = location.tasks[0];\n    this.selectedTask = task;\n    this.showTaskModal = true;\n    \n    this.updateScore(25);\n    this.createParticles(location.x, location.y, \"+25\", \"#66B2FF\");\n  }\n  \n  handleKeyPress(event) {\n    if (event.key === 'Escape') {\n      this.showTaskModal = false;\n      this.selectedTask = null;\n    }\n  }\n  \n  createParticles(x, y, text, color) {\n    for (let i = 0; i < 5; i++) {\n      this.particles.push({\n        x: x + (Math.random() - 0.5) * 20,\n        y: y + (Math.random() - 0.5) * 20,\n        vx: (Math.random() - 0.5) * 4,\n        vy: -Math.random() * 3 - 1,\n        life: 60,\n        maxLife: 60,\n        color: color,\n        text: i === 0 ? text : null,\n        size: 4 + Math.random() * 4\n      });\n    }\n  }\n  \n  updateSpirits() {\n    this.spirits.forEach(spirit => {\n      spirit.x += spirit.vx;\n      spirit.y += spirit.vy;\n      \n      if (spirit.x <= spirit.size || spirit.x >= this.canvas.width - spirit.size) {\n        spirit.vx *= -0.8;\n        spirit.x = Math.max(spirit.size, Math.min(this.canvas.width - spirit.size, spirit.x));\n      }\n      if (spirit.y <= spirit.size || spirit.y >= this.canvas.height - spirit.size) {\n        spirit.vy *= -0.8;\n        spirit.y = Math.max(spirit.size, Math.min(this.canvas.height - spirit.size, spirit.y));\n      }\n      \n      spirit.pulsePhase += 0.1;\n      spirit.currentGlow = spirit.glow + Math.sin(spirit.pulsePhase) * 5;\n      \n      for (let location of this.locations) {\n        if (location.tasks.length > 0) {\n          const dx = location.x - spirit.x;\n          const dy = location.y - spirit.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance > 0 && distance < 150) {\n            const force = 0.02 / distance;\n            spirit.vx += (dx / distance) * force;\n            spirit.vy += (dy / distance) * force;\n          }\n        }\n      }\n      \n      spirit.vx *= 0.99;\n      spirit.vy *= 0.99;\n    });\n  }\n  \n  updateParticles() {\n    this.particles = this.particles.filter(particle => {\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      particle.vy += 0.1;\n      particle.life--;\n      return particle.life > 0;\n    });\n  }\n  \n  render() {\n    // Draw background\n    if (this.images.background && this.imagesLoaded) {\n      // Scale background to fit canvas\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n      \n      // Add slight overlay for better visibility\n      this.ctx.fillStyle = 'rgba(0, 20, 40, 0.3)';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    } else {\n      // Fallback background\n      this.ctx.fillStyle = 'rgba(0, 20, 40, 0.1)';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    // Draw locations\n    this.locations.forEach(location => {\n      const taskCount = location.tasks.length;\n      \n      this.ctx.beginPath();\n      this.ctx.arc(location.x, location.y, location.radius, 0, Math.PI * 2);\n      this.ctx.fillStyle = taskCount > 0 ? location.color : '#444';\n      this.ctx.fill();\n      \n      this.ctx.strokeStyle = taskCount > 0 ? '#fff' : '#666';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      \n      if (taskCount > 0) {\n        this.ctx.beginPath();\n        this.ctx.arc(location.x + 35, location.y - 35, 15, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        \n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = 'bold 14px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(taskCount.toString(), location.x + 35, location.y - 30);\n      }\n      \n      this.ctx.fillStyle = taskCount > 0 ? '#fff' : '#999';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText(location.name, location.x, location.y + 5);\n    });\n    \n    // Draw spirits\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImageByDifficulty(spirit.difficulty);\n      \n      if (spiritImage && this.imagesLoaded) {\n        // Draw glow effect behind image\n        const gradient = this.ctx.createRadialGradient(\n          spirit.x, spirit.y, 0,\n          spirit.x, spirit.y, spirit.size + spirit.currentGlow\n        );\n        gradient.addColorStop(0, spirit.color + '80');\n        gradient.addColorStop(1, 'transparent');\n        \n        this.ctx.fillStyle = gradient;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size + spirit.currentGlow, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        // Draw sprite image\n        const imageSize = spirit.size * 2;\n        this.ctx.drawImage(\n          spiritImage,\n          spirit.x - imageSize/2,\n          spirit.y - imageSize/2,\n          imageSize,\n          imageSize\n        );\n\n        // Draw red circle with task count for this spirit's difficulty and nearest location\n        const nearestLocation = this.getNearestLocationForSpirit(spirit);\n        if (nearestLocation) {\n          const taskCount = this.getTaskCountByCategoyAndDifficulty(nearestLocation.name, spirit.difficulty);\n          \n          if (taskCount > 0) {\n            // Red circle background\n            this.ctx.beginPath();\n            this.ctx.arc(spirit.x + spirit.size - 5, spirit.y - spirit.size + 5, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = '#FF6B6B';\n            this.ctx.fill();\n            \n            // White border\n            this.ctx.strokeStyle = '#fff';\n            this.ctx.lineWidth = 2;\n            this.ctx.stroke();\n            \n            // Task count text\n            this.ctx.fillStyle = '#fff';\n            this.ctx.font = 'bold 10px Arial';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(taskCount.toString(), spirit.x + spirit.size - 5, spirit.y - spirit.size + 9);\n          }\n        }\n      } else {\n        // Fallback: draw colored circle with face\n        const gradient = this.ctx.createRadialGradient(\n          spirit.x, spirit.y, 0,\n          spirit.x, spirit.y, spirit.size + spirit.currentGlow\n        );\n        gradient.addColorStop(0, spirit.color);\n        gradient.addColorStop(1, 'transparent');\n        \n        this.ctx.fillStyle = gradient;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size + spirit.currentGlow, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        this.ctx.fillStyle = spirit.color;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        // Draw face\n        this.ctx.fillStyle = '#fff';\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x - 5, spirit.y - 3, 2, 0, Math.PI * 2);\n        this.ctx.arc(spirit.x + 5, spirit.y - 3, 2, 0, Math.PI * 2);\n        this.ctx.fill();\n        \n        this.ctx.strokeStyle = '#fff';\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y + 3, 4, 0, Math.PI);\n        this.ctx.stroke();\n\n        // Draw red circle with task count for fallback spirits too\n        const nearestLocation = this.getNearestLocationForSpirit(spirit);\n        if (nearestLocation) {\n          const taskCount = this.getTaskCountByCategoyAndDifficulty(nearestLocation.name, spirit.difficulty);\n          \n          if (taskCount > 0) {\n            // Red circle background\n            this.ctx.beginPath();\n            this.ctx.arc(spirit.x + spirit.size - 5, spirit.y - spirit.size + 5, 10, 0, Math.PI * 2);\n            this.ctx.fillStyle = '#FF6B6B';\n            this.ctx.fill();\n            \n            // White border\n            this.ctx.strokeStyle = '#fff';\n            this.ctx.lineWidth = 2;\n            this.ctx.stroke();\n            \n            // Task count text\n            this.ctx.fillStyle = '#fff';\n            this.ctx.font = 'bold 10px Arial';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(taskCount.toString(), spirit.x + spirit.size - 5, spirit.y - spirit.size + 9);\n          }\n        }\n      }\n    });\n    \n    // Draw particles\n    this.particles.forEach(particle => {\n      const alpha = particle.life / particle.maxLife;\n      this.ctx.fillStyle = particle.color + Math.floor(alpha * 255).toString(16).padStart(2, '0');\n      \n      if (particle.text) {\n        this.ctx.font = 'bold 16px Arial';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(particle.text, particle.x, particle.y);\n      } else {\n        this.ctx.beginPath();\n        this.ctx.arc(particle.x, particle.y, particle.size * alpha, 0, Math.PI * 2);\n        this.ctx.fill();\n      }\n    });\n    \n    // Draw task modal\n    if (this.showTaskModal && this.selectedTask) {\n      this.drawTaskModal();\n    }\n    \n    // Draw instructions\n    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    this.ctx.fillRect(10, this.canvas.height - 50, this.canvas.width - 20, 40);\n    \n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = '14px Arial';\n    this.ctx.textAlign = 'left';\n    this.ctx.fillText('Click spirits or locations to interact • Spirits show task difficulty • ESC to close modal', 20, this.canvas.height - 25);\n  }\n  \n  drawTaskModal() {\n    const task = this.selectedTask;\n    if (!task) return;\n    \n    const modalWidth = 350;\n    const modalHeight = 250;\n    const modalX = (this.canvas.width - modalWidth) / 2;\n    const modalY = (this.canvas.height - modalHeight) / 2;\n    \n    // Modal background with gradient\n    const gradient = this.ctx.createLinearGradient(modalX, modalY, modalX, modalY + modalHeight);\n    gradient.addColorStop(0, 'rgba(0, 44, 84, 0.98)');\n    gradient.addColorStop(1, 'rgba(0, 20, 40, 0.98)');\n    this.ctx.fillStyle = gradient;\n    this.ctx.fillRect(modalX, modalY, modalWidth, modalHeight);\n    \n    // Modal border with temperature-based color\n    const temp = task.temperature || 0;\n    let borderColor = '#66B2FF';\n    if (temp > 80) borderColor = '#FF6B6B';\n    else if (temp > 60) borderColor = '#FFCC00';\n    \n    this.ctx.strokeStyle = borderColor;\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeRect(modalX, modalY, modalWidth, modalHeight);\n    \n    // Task title\n    this.ctx.fillStyle = '#FFCC00';\n    this.ctx.font = 'bold 18px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText(task.title, modalX + modalWidth / 2, modalY + 35);\n    \n    // Difficulty and temperature indicators\n    const difficultyEmoji = task.difficulty === 'epic' ? '🔥' : task.difficulty === 'rare' ? '⚡' : '💎';\n    const tempEmoji = temp > 80 ? '🔥' : temp > 60 ? '🌶️' : temp > 40 ? '♨️' : '🫖';\n    \n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = '20px Arial';\n    this.ctx.fillText(`${difficultyEmoji} ${tempEmoji}`, modalX + modalWidth - 50, modalY + 35);\n    \n    // Task details\n    this.ctx.fillStyle = '#fff';\n    this.ctx.font = '14px Arial';\n    this.ctx.textAlign = 'left';\n    \n    const details = [\n      `Category: ${task.category}`,\n      `Difficulty: ${task.difficulty}`,\n      `Value: ${task.value?.toLocaleString() || 0}`,\n      `Holder: ${this.teamStats[task.holder]?.name || 'Unknown'}`,\n      `Temperature: ${Math.round(temp)}°`,\n      `Time Left: ${task.timeLeft || 0}s`,\n      `Passes: ${task.passCount || 0}`\n    ];\n    \n    details.forEach((detail, index) => {\n      this.ctx.fillText(detail, modalX + 20, modalY + 65 + index * 20);\n    });\n    \n    // Progress bar for temperature\n    const barWidth = modalWidth - 40;\n    const barHeight = 8;\n    const barX = modalX + 20;\n    const barY = modalY + 210;\n    \n    // Background bar\n    this.ctx.fillStyle = '#333';\n    this.ctx.fillRect(barX, barY, barWidth, barHeight);\n    \n    // Temperature bar\n    this.ctx.fillStyle = temp > 80 ? '#FF6B6B' : temp > 60 ? '#FFCC00' : '#66B2FF';\n    this.ctx.fillRect(barX, barY, (barWidth * temp) / 100, barHeight);\n    \n    // Action buttons\n    const isMyTask = task.holder === this.currentUser;\n    \n    if (isMyTask) {\n      // Pass button\n      this.ctx.fillStyle = '#FFCC00';\n      this.ctx.fillRect(modalX + 20, modalY + 220, 100, 25);\n      this.ctx.fillStyle = '#000';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('Pass Task', modalX + 70, modalY + 237);\n      \n      // Complete button\n      this.ctx.fillStyle = '#2ECC71';\n      this.ctx.fillRect(modalX + 130, modalY + 220, 100, 25);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.fillText('Complete', modalX + 180, modalY + 237);\n      \n      // Close button\n      this.ctx.fillStyle = '#FF6B6B';\n      this.ctx.fillRect(modalX + 240, modalY + 220, 80, 25);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.fillText('Close', modalX + 280, modalY + 237);\n    } else {\n      // Just close button for tasks not owned by current user\n      this.ctx.fillStyle = '#FF6B6B';\n      this.ctx.fillRect(modalX + modalWidth/2 - 40, modalY + 220, 80, 25);\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = 'bold 12px Arial';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('Close', modalX + modalWidth/2, modalY + 237);\n    }\n    \n    // Handle button clicks (add event listener if not already added)\n    if (!this.modalClickHandler) {\n      this.modalClickHandler = (event) => {\n        if (!this.showTaskModal) return;\n        \n        const rect = this.canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        \n        if (y >= modalY + 220 && y <= modalY + 245) {\n          if (isMyTask) {\n            if (x >= modalX + 20 && x <= modalX + 120) {\n              // Pass button clicked\n              this.onTaskClick(task);\n              this.showTaskModal = false;\n              this.selectedTask = null;\n            } else if (x >= modalX + 130 && x <= modalX + 230) {\n              // Complete button clicked\n              this.onTaskComplete(task);\n              this.showTaskModal = false;\n              this.selectedTask = null;\n              this.updateTaskLocations();\n              this.generateSpirits(); // Regenerate spirits when tasks change\n            } else if (x >= modalX + 240 && x <= modalX + 320) {\n              // Close button clicked\n              this.showTaskModal = false;\n              this.selectedTask = null;\n            }\n          } else {\n            if (x >= modalX + modalWidth/2 - 40 && x <= modalX + modalWidth/2 + 40) {\n              // Close button clicked\n              this.showTaskModal = false;\n              this.selectedTask = null;\n            }\n          }\n        }\n      };\n      this.canvas.addEventListener('click', this.modalClickHandler);\n    }\n  }\n  \n  gameLoop() {\n    if (!this.isRunning) return;\n    \n    this.updateSpirits();\n    this.updateParticles();\n    this.updateTaskLocations();\n    this.render();\n    \n    this.animationId = requestAnimationFrame(this.gameLoop);\n  }\n}\n\nexport default HotPotatoGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}