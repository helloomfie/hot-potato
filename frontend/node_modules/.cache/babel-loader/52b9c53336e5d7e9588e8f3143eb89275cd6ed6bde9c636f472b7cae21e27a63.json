{"ast":null,"code":"class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.loadImages();\n    this.resizeCanvas();\n  }\n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png',\n      spirit3: 'myimages/spirit3.png'\n    };\n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    // Original positions: 1:(320,780), 2:(310,400), 3:(700,360), 4:(1060,250), 5:(1100,670), 6:(1330,790)\n    // Image size: 1536Ã—1024\n    return [{\n      name: \"Sales Office\",\n      x: 20.8,\n      y: 76.2,\n      category: \"Sales\"\n    },\n    // 320/1536 = 20.8%, 780/1024 = 76.2%\n    {\n      name: \"New Lead\",\n      x: 20.2,\n      y: 39.1,\n      category: \"New Lead\"\n    },\n    // 310/1536 = 20.2%, 400/1024 = 39.1%\n    {\n      name: \"New Customer\",\n      x: 45.6,\n      y: 35.2,\n      category: \"New Customer\"\n    },\n    // 700/1536 = 45.6%, 360/1024 = 35.2%\n    {\n      name: \"Pre-Construction\",\n      x: 69.0,\n      y: 24.4,\n      category: \"Pre-Construction\"\n    },\n    // 1060/1536 = 69.0%, 250/1024 = 24.4%\n    {\n      name: \"Construction\",\n      x: 71.6,\n      y: 65.4,\n      category: \"Construction\"\n    },\n    // 1100/1536 = 71.6%, 670/1024 = 65.4%\n    {\n      name: \"Post Construction\",\n      x: 86.6,\n      y: 77.1,\n      category: \"Post Construction\"\n    } // 1330/1536 = 86.6%, 790/1024 = 77.1%\n    ];\n  }\n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = location.x / 100 * this.canvas.width;\n      const actualY = location.y / 100 * this.canvas.height;\n      difficulties.forEach((difficulty, index) => {\n        const angle = index * 120 * (Math.PI / 180);\n        // Scale spirit distance relative to canvas size\n        const distance = Math.min(this.canvas.width, this.canvas.height) * 0.08; // 8% of smaller dimension\n\n        this.spirits.push({\n          x: actualX + Math.cos(angle) * distance,\n          y: actualY + Math.sin(angle) * distance,\n          difficulty: difficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025 // 2.5% of smaller dimension\n        });\n      });\n    });\n  }\n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => task.category === location.category && task.difficulty === difficulty).length;\n  }\n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  stop() {\n    this.isRunning = false;\n  }\n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw background\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    // Draw locations\n    this.locations.forEach((location, index) => {\n      // Convert percentages to actual pixels\n      const actualX = location.x / 100 * this.canvas.width;\n      const actualY = location.y / 100 * this.canvas.height;\n      const radius = Math.min(this.canvas.width, this.canvas.height) * 0.05; // 5% of smaller dimension\n\n      const totalTasks = this.hotPotatoes.filter(task => task.category === location.category).length;\n\n      // Location circle\n      this.ctx.beginPath();\n      this.ctx.arc(actualX, actualY, radius, 0, Math.PI * 2);\n      this.ctx.fillStyle = totalTasks > 0 ? 'rgba(255, 204, 0, 0.5)' : 'rgba(100, 100, 100, 0.5)';\n      this.ctx.fill();\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n\n      // Location number\n      const numberRadius = Math.min(this.canvas.width, this.canvas.height) * 0.015;\n      this.ctx.beginPath();\n      this.ctx.arc(actualX - radius * 0.6, actualY - radius * 0.6, numberRadius, 0, Math.PI * 2);\n      this.ctx.fillStyle = '#000';\n      this.ctx.fill();\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.015}px Arial`;\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText((index + 1).toString(), actualX - radius * 0.6, actualY - radius * 0.6 + numberRadius * 0.3);\n\n      // Task count\n      if (totalTasks > 0) {\n        const countRadius = Math.min(this.canvas.width, this.canvas.height) * 0.02;\n        this.ctx.beginPath();\n        this.ctx.arc(actualX + radius * 0.6, actualY - radius * 0.6, countRadius, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.018}px Arial`;\n        this.ctx.fillText(totalTasks.toString(), actualX + radius * 0.6, actualY - radius * 0.6 + countRadius * 0.3);\n      }\n\n      // Location name\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.014}px Arial`;\n      this.ctx.strokeStyle = '#000';\n      this.ctx.lineWidth = 3;\n      this.ctx.strokeText(location.name, actualX, actualY + radius + 20);\n      this.ctx.fillText(location.name, actualX, actualY + radius + 20);\n    });\n\n    // Draw spirits\n    this.spirits.forEach(spirit => {\n      const taskCount = this.getTaskCount(spirit.location, spirit.difficulty);\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      if (spiritImage) {\n        // Draw spirit image\n        this.ctx.drawImage(spiritImage, spirit.x - 20, spirit.y - 20, 40, 40);\n      } else {\n        // Fallback circle\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.getSpiritColor(spirit.difficulty);\n        this.ctx.fill();\n      }\n      if (taskCount > 0) {\n        const countRadius = Math.min(this.canvas.width, this.canvas.height) * 0.015;\n        const imageSize = spirit.size * 2;\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x + imageSize * 0.3, spirit.y - imageSize * 0.3, countRadius, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.strokeStyle = '#fff';\n        this.ctx.lineWidth = 2;\n        this.ctx.stroke();\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.012}px Arial`;\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(taskCount.toString(), spirit.x + imageSize * 0.3, spirit.y - imageSize * 0.3 + countRadius * 0.3);\n      }\n    });\n  }\n  getSpiritImage(difficulty) {\n    const imageMap = {\n      common: 'spirit1',\n      rare: 'spirit2',\n      epic: 'spirit3'\n    };\n    return this.images[imageMap[difficulty]];\n  }\n  getSpiritColor(difficulty) {\n    const colorMap = {\n      common: '#66B2FF',\n      rare: '#9B59B6',\n      epic: '#FF6B6B'\n    };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\nexport default HotPotatoGame;","map":{"version":3,"names":["HotPotatoGame","constructor","canvasId","gameState","updateScore","hotPotatoes","teamStats","currentUser","onTaskClick","onTaskComplete","canvas","document","getElementById","ctx","getContext","isRunning","spirits","locations","initializeLocations","loadImages","resizeCanvas","images","imageUrls","background","spirit1","spirit2","spirit3","key","url","Object","entries","img","Image","src","name","x","y","category","generateSpirits","difficulties","forEach","location","actualX","width","actualY","height","difficulty","index","angle","Math","PI","distance","min","push","cos","sin","size","getTaskCount","filter","task","length","start","gameLoop","stop","render","clearRect","drawImage","radius","totalTasks","beginPath","arc","fillStyle","fill","strokeStyle","lineWidth","stroke","numberRadius","font","textAlign","fillText","toString","countRadius","strokeText","spirit","taskCount","spiritImage","getSpiritImage","getSpiritColor","imageSize","imageMap","common","rare","epic","colorMap","requestAnimationFrame"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/game.js"],"sourcesContent":["class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    \n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.loadImages();\n    this.resizeCanvas();\n  }\n  \n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png', \n      spirit3: 'myimages/spirit3.png'\n    };\n    \n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  \n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    // Original positions: 1:(320,780), 2:(310,400), 3:(700,360), 4:(1060,250), 5:(1100,670), 6:(1330,790)\n    // Image size: 1536Ã—1024\n    return [\n      { name: \"Sales Office\", x: 20.8, y: 76.2, category: \"Sales\" },           // 320/1536 = 20.8%, 780/1024 = 76.2%\n      { name: \"New Lead\", x: 20.2, y: 39.1, category: \"New Lead\" },           // 310/1536 = 20.2%, 400/1024 = 39.1%\n      { name: \"New Customer\", x: 45.6, y: 35.2, category: \"New Customer\" },   // 700/1536 = 45.6%, 360/1024 = 35.2%\n      { name: \"Pre-Construction\", x: 69.0, y: 24.4, category: \"Pre-Construction\" }, // 1060/1536 = 69.0%, 250/1024 = 24.4%\n      { name: \"Construction\", x: 71.6, y: 65.4, category: \"Construction\" },   // 1100/1536 = 71.6%, 670/1024 = 65.4%\n      { name: \"Post Construction\", x: 86.6, y: 77.1, category: \"Post Construction\" } // 1330/1536 = 86.6%, 790/1024 = 77.1%\n    ];\n  }\n  \n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    \n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = (location.x / 100) * this.canvas.width;\n      const actualY = (location.y / 100) * this.canvas.height;\n      \n      difficulties.forEach((difficulty, index) => {\n        const angle = (index * 120) * (Math.PI / 180);\n        // Scale spirit distance relative to canvas size\n        const distance = Math.min(this.canvas.width, this.canvas.height) * 0.08; // 8% of smaller dimension\n        \n        this.spirits.push({\n          x: actualX + Math.cos(angle) * distance,\n          y: actualY + Math.sin(angle) * distance,\n          difficulty: difficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025 // 2.5% of smaller dimension\n        });\n      });\n    });\n  }\n  \n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => \n      task.category === location.category && task.difficulty === difficulty\n    ).length;\n  }\n  \n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  \n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n  \n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw background\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    // Draw locations\n    this.locations.forEach((location, index) => {\n      // Convert percentages to actual pixels\n      const actualX = (location.x / 100) * this.canvas.width;\n      const actualY = (location.y / 100) * this.canvas.height;\n      const radius = Math.min(this.canvas.width, this.canvas.height) * 0.05; // 5% of smaller dimension\n      \n      const totalTasks = this.hotPotatoes.filter(task => task.category === location.category).length;\n      \n      // Location circle\n      this.ctx.beginPath();\n      this.ctx.arc(actualX, actualY, radius, 0, Math.PI * 2);\n      this.ctx.fillStyle = totalTasks > 0 ? 'rgba(255, 204, 0, 0.5)' : 'rgba(100, 100, 100, 0.5)';\n      this.ctx.fill();\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n      \n      // Location number\n      const numberRadius = Math.min(this.canvas.width, this.canvas.height) * 0.015;\n      this.ctx.beginPath();\n      this.ctx.arc(actualX - radius * 0.6, actualY - radius * 0.6, numberRadius, 0, Math.PI * 2);\n      this.ctx.fillStyle = '#000';\n      this.ctx.fill();\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.015}px Arial`;\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText((index + 1).toString(), actualX - radius * 0.6, actualY - radius * 0.6 + numberRadius * 0.3);\n      \n      // Task count\n      if (totalTasks > 0) {\n        const countRadius = Math.min(this.canvas.width, this.canvas.height) * 0.02;\n        this.ctx.beginPath();\n        this.ctx.arc(actualX + radius * 0.6, actualY - radius * 0.6, countRadius, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.018}px Arial`;\n        this.ctx.fillText(totalTasks.toString(), actualX + radius * 0.6, actualY - radius * 0.6 + countRadius * 0.3);\n      }\n      \n      // Location name\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.014}px Arial`;\n      this.ctx.strokeStyle = '#000';\n      this.ctx.lineWidth = 3;\n      this.ctx.strokeText(location.name, actualX, actualY + radius + 20);\n      this.ctx.fillText(location.name, actualX, actualY + radius + 20);\n    });\n    \n    // Draw spirits\n    this.spirits.forEach(spirit => {\n      const taskCount = this.getTaskCount(spirit.location, spirit.difficulty);\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      \n      if (spiritImage) {\n        // Draw spirit image\n        this.ctx.drawImage(spiritImage, spirit.x - 20, spirit.y - 20, 40, 40);\n      } else {\n        // Fallback circle\n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x, spirit.y, spirit.size, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.getSpiritColor(spirit.difficulty);\n        this.ctx.fill();\n      }\n      \n      if (taskCount > 0) {\n        const countRadius = Math.min(this.canvas.width, this.canvas.height) * 0.015;\n        const imageSize = spirit.size * 2;\n        \n        this.ctx.beginPath();\n        this.ctx.arc(spirit.x + imageSize * 0.3, spirit.y - imageSize * 0.3, countRadius, 0, Math.PI * 2);\n        this.ctx.fillStyle = '#FF6B6B';\n        this.ctx.fill();\n        this.ctx.strokeStyle = '#fff';\n        this.ctx.lineWidth = 2;\n        this.ctx.stroke();\n        \n        this.ctx.fillStyle = '#fff';\n        this.ctx.font = `bold ${Math.min(this.canvas.width, this.canvas.height) * 0.012}px Arial`;\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(taskCount.toString(), spirit.x + imageSize * 0.3, spirit.y - imageSize * 0.3 + countRadius * 0.3);\n      }\n    });\n  }\n  \n  getSpiritImage(difficulty) {\n    const imageMap = { common: 'spirit1', rare: 'spirit2', epic: 'spirit3' };\n    return this.images[imageMap[difficulty]];\n  }\n  \n  getSpiritColor(difficulty) {\n    const colorMap = { common: '#66B2FF', rare: '#9B59B6', epic: '#FF6B6B' };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  \n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\n\nexport default HotPotatoGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}