{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst REQUEST_TIMEOUT = 10000;\nconst fetchWithTimeout = async (url, options = {}) => {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);\n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    if (error.name === 'AbortError') {\n      throw new Error('Request timeout');\n    }\n    throw error;\n  }\n};\nexport const taskAPI = {\n  getAllTasks: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch tasks: ${response.status} ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      throw error;\n    }\n  },\n  createTask: async taskData => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to create task: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error creating task:', error);\n      throw error;\n    }\n  },\n  updateTask: async (taskId, taskData) => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/${taskId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to update task: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating task:', error);\n      throw error;\n    }\n  },\n  deleteTask: async taskId => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/${taskId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to delete task: ${response.status}`);\n      }\n      const text = await response.text();\n      return text ? JSON.parse(text) : {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  },\n  getArchivedTasks: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/archived`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch archived tasks: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching archived tasks:', error);\n      throw error;\n    }\n  },\n  archiveTask: async (taskId, archiveData) => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/${taskId}/archive`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(archiveData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to archive task: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error archiving task:', error);\n      throw error;\n    }\n  },\n  healthCheck: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL.replace('/api', '')}/api/health`, {\n        method: 'GET'\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false;\n    }\n  }\n};\nexport const handleAPIError = error => {\n  console.error('API Error:', error);\n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\n    return {\n      success: false,\n      message: 'Network error - check your internet connection',\n      type: 'network'\n    };\n  }\n  if (error.message === 'Request timeout') {\n    return {\n      success: false,\n      message: 'Request timed out - server may be slow',\n      type: 'timeout'\n    };\n  }\n  if (error.message.includes('500')) {\n    return {\n      success: false,\n      message: 'Server error - please try again later',\n      type: 'server'\n    };\n  }\n  if (error.message.includes('4')) {\n    return {\n      success: false,\n      message: 'Request error - please check your data',\n      type: 'client'\n    };\n  }\n  return {\n    success: false,\n    message: error.message || 'An unexpected error occurred',\n    type: 'unknown'\n  };\n};\nexport const checkConnection = async () => {\n  try {\n    return await taskAPI.healthCheck();\n  } catch (error) {\n    return false;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","REQUEST_TIMEOUT","fetchWithTimeout","url","options","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","error","name","Error","taskAPI","getAllTasks","ok","status","statusText","json","console","createTask","taskData","method","headers","body","JSON","stringify","errorData","catch","message","updateTask","taskId","deleteTask","text","parse","success","getArchivedTasks","archiveTask","archiveData","healthCheck","replace","handleAPIError","includes","type","checkConnection"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst REQUEST_TIMEOUT = 10000;\n\nconst fetchWithTimeout = async (url, options = {}) => {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);\n  \n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    if (error.name === 'AbortError') {\n      throw new Error('Request timeout');\n    }\n    throw error;\n  }\n};\n\nexport const taskAPI = {\n  getAllTasks: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch tasks: ${response.status} ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      throw error;\n    }\n  },\n\n  createTask: async (taskData) => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to create task: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error creating task:', error);\n      throw error;\n    }\n  },\n\n  updateTask: async (taskId, taskData) => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/${taskId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(taskData),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to update task: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error updating task:', error);\n      throw error;\n    }\n  },\n\n  deleteTask: async (taskId) => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/${taskId}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to delete task: ${response.status}`);\n      }\n      \n      const text = await response.text();\n      return text ? JSON.parse(text) : { success: true };\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  },\n\n  getArchivedTasks: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/archived`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch archived tasks: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching archived tasks:', error);\n      throw error;\n    }\n  },\n\n  archiveTask: async (taskId, archiveData) => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/tasks/${taskId}/archive`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(archiveData),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `Failed to archive task: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error archiving task:', error);\n      throw error;\n    }\n  },\n\n  healthCheck: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL.replace('/api', '')}/api/health`, {\n        method: 'GET',\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return false;\n    }\n  }\n};\n\nexport const handleAPIError = (error) => {\n  console.error('API Error:', error);\n  \n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\n    return {\n      success: false,\n      message: 'Network error - check your internet connection',\n      type: 'network'\n    };\n  }\n  \n  if (error.message === 'Request timeout') {\n    return {\n      success: false,\n      message: 'Request timed out - server may be slow',\n      type: 'timeout'\n    };\n  }\n  \n  if (error.message.includes('500')) {\n    return {\n      success: false,\n      message: 'Server error - please try again later',\n      type: 'server'\n    };\n  }\n  \n  if (error.message.includes('4')) {\n    return {\n      success: false,\n      message: 'Request error - please check your data',\n      type: 'client'\n    };\n  }\n  \n  return {\n    success: false,\n    message: error.message || 'An unexpected error occurred',\n    type: 'unknown'\n  };\n};\n\nexport const checkConnection = async () => {\n  try {\n    return await taskAPI.healthCheck();\n  } catch (error) {\n    return false;\n  }\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,eAAe,GAAG,KAAK;AAE7B,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACpD,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;EACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAER,eAAe,CAAC;EAEvE,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAE;MAChC,GAAGC,OAAO;MACVQ,MAAM,EAAEP,UAAU,CAACO;IACrB,CAAC,CAAC;IACFC,YAAY,CAACN,SAAS,CAAC;IACvB,OAAOG,QAAQ;EACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdD,YAAY,CAACN,SAAS,CAAC;IACvB,IAAIO,KAAK,CAACC,IAAI,KAAK,YAAY,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACpC;IACA,MAAMF,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMG,OAAO,GAAG;EACrBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMR,gBAAgB,CAAC,GAAGL,YAAY,QAAQ,CAAC;MAChE,IAAI,CAACa,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIH,KAAK,CAAC,0BAA0BN,QAAQ,CAACU,MAAM,IAAIV,QAAQ,CAACW,UAAU,EAAE,CAAC;MACrF;MACA,OAAO,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDU,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMR,gBAAgB,CAAC,GAAGL,YAAY,QAAQ,EAAE;QAC/D6B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMY,SAAS,GAAG,MAAMrB,QAAQ,CAACY,IAAI,CAAC,CAAC,CAACU,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIhB,KAAK,CAACe,SAAS,CAACE,OAAO,IAAI,0BAA0BvB,QAAQ,CAACU,MAAM,EAAE,CAAC;MACnF;MAEA,OAAO,MAAMV,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDoB,UAAU,EAAE,MAAAA,CAAOC,MAAM,EAAEV,QAAQ,KAAK;IACtC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMR,gBAAgB,CAAC,GAAGL,YAAY,UAAUsC,MAAM,EAAE,EAAE;QACzET,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMY,SAAS,GAAG,MAAMrB,QAAQ,CAACY,IAAI,CAAC,CAAC,CAACU,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIhB,KAAK,CAACe,SAAS,CAACE,OAAO,IAAI,0BAA0BvB,QAAQ,CAACU,MAAM,EAAE,CAAC;MACnF;MAEA,OAAO,MAAMV,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDsB,UAAU,EAAE,MAAOD,MAAM,IAAK;IAC5B,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAMR,gBAAgB,CAAC,GAAGL,YAAY,UAAUsC,MAAM,EAAE,EAAE;QACzET,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAI,CAAChB,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMY,SAAS,GAAG,MAAMrB,QAAQ,CAACY,IAAI,CAAC,CAAC,CAACU,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIhB,KAAK,CAACe,SAAS,CAACE,OAAO,IAAI,0BAA0BvB,QAAQ,CAACU,MAAM,EAAE,CAAC;MACnF;MAEA,MAAMiB,IAAI,GAAG,MAAM3B,QAAQ,CAAC2B,IAAI,CAAC,CAAC;MAClC,OAAOA,IAAI,GAAGR,IAAI,CAACS,KAAK,CAACD,IAAI,CAAC,GAAG;QAAEE,OAAO,EAAE;MAAK,CAAC;IACpD,CAAC,CAAC,OAAOzB,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED0B,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAM9B,QAAQ,GAAG,MAAMR,gBAAgB,CAAC,GAAGL,YAAY,iBAAiB,CAAC;MACzE,IAAI,CAACa,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIH,KAAK,CAAC,mCAAmCN,QAAQ,CAACU,MAAM,EAAE,CAAC;MACvE;MACA,OAAO,MAAMV,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAED2B,WAAW,EAAE,MAAAA,CAAON,MAAM,EAAEO,WAAW,KAAK;IAC1C,IAAI;MACF,MAAMhC,QAAQ,GAAG,MAAMR,gBAAgB,CAAC,GAAGL,YAAY,UAAUsC,MAAM,UAAU,EAAE;QACjFT,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAAChC,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMY,SAAS,GAAG,MAAMrB,QAAQ,CAACY,IAAI,CAAC,CAAC,CAACU,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIhB,KAAK,CAACe,SAAS,CAACE,OAAO,IAAI,2BAA2BvB,QAAQ,CAACU,MAAM,EAAE,CAAC;MACpF;MAEA,OAAO,MAAMV,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED6B,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMjC,QAAQ,GAAG,MAAMR,gBAAgB,CAAC,GAAGL,YAAY,CAAC+C,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,aAAa,EAAE;QACxFlB,MAAM,EAAE;MACV,CAAC,CAAC;MACF,OAAOhB,QAAQ,CAACS,EAAE;IACpB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,KAAK;IACd;EACF;AACF,CAAC;AAED,OAAO,MAAM+B,cAAc,GAAI/B,KAAK,IAAK;EACvCS,OAAO,CAACT,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAElC,IAAIA,KAAK,CAACC,IAAI,KAAK,WAAW,IAAID,KAAK,CAACmB,OAAO,CAACa,QAAQ,CAAC,OAAO,CAAC,EAAE;IACjE,OAAO;MACLP,OAAO,EAAE,KAAK;MACdN,OAAO,EAAE,gDAAgD;MACzDc,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAIjC,KAAK,CAACmB,OAAO,KAAK,iBAAiB,EAAE;IACvC,OAAO;MACLM,OAAO,EAAE,KAAK;MACdN,OAAO,EAAE,wCAAwC;MACjDc,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAIjC,KAAK,CAACmB,OAAO,CAACa,QAAQ,CAAC,KAAK,CAAC,EAAE;IACjC,OAAO;MACLP,OAAO,EAAE,KAAK;MACdN,OAAO,EAAE,uCAAuC;MAChDc,IAAI,EAAE;IACR,CAAC;EACH;EAEA,IAAIjC,KAAK,CAACmB,OAAO,CAACa,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC/B,OAAO;MACLP,OAAO,EAAE,KAAK;MACdN,OAAO,EAAE,wCAAwC;MACjDc,IAAI,EAAE;IACR,CAAC;EACH;EAEA,OAAO;IACLR,OAAO,EAAE,KAAK;IACdN,OAAO,EAAEnB,KAAK,CAACmB,OAAO,IAAI,8BAA8B;IACxDc,IAAI,EAAE;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,OAAO,MAAM/B,OAAO,CAAC0B,WAAW,CAAC,CAAC;EACpC,CAAC,CAAC,OAAO7B,KAAK,EAAE;IACd,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}