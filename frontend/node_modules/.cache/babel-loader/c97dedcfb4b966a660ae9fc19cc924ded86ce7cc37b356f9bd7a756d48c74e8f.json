{"ast":null,"code":"class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.hoveredSpirit = null; // Track which spirit is being hovered\n    this.loadImages();\n    this.resizeCanvas();\n    this.bindEvents();\n  }\n  bindEvents() {\n    // Add mouse move listener for hover effects\n    this.canvas.addEventListener('mousemove', e => {\n      const rect = this.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      let newHoveredSpirit = null;\n\n      // Check if mouse is over any spirit\n      for (let spirit of this.spirits) {\n        const distance = Math.sqrt((mouseX - spirit.x) ** 2 + (mouseY - spirit.y) ** 2);\n        if (distance < 40) {\n          // 50px radius for hover detection\n          newHoveredSpirit = spirit;\n          break;\n        }\n      }\n      this.hoveredSpirit = newHoveredSpirit;\n      this.canvas.style.cursor = this.hoveredSpirit ? 'pointer' : 'default';\n    });\n\n    // Add mouse leave listener\n    this.canvas.addEventListener('mouseleave', () => {\n      this.hoveredSpirit = null;\n      this.canvas.style.cursor = 'default';\n    });\n  }\n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png',\n      spirit3: 'myimages/spirit3.png'\n    };\n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    return [{\n      name: \"Sales Office\",\n      x: 20.8,\n      y: 76.2,\n      category: \"Sales\"\n    }, {\n      name: \"New Lead\",\n      x: 20.2,\n      y: 39.1,\n      category: \"New Lead\"\n    }, {\n      name: \"New Customer\",\n      x: 45.6,\n      y: 35.2,\n      category: \"New Customer\"\n    }, {\n      name: \"Pre-Construction\",\n      x: 69.0,\n      y: 24.4,\n      category: \"Pre-Construction\"\n    }, {\n      name: \"Construction\",\n      x: 71.6,\n      y: 65.4,\n      category: \"Construction\"\n    }, {\n      name: \"Post Construction\",\n      x: 86.6,\n      y: 77.1,\n      category: \"Post Construction\"\n    }];\n  }\n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = location.x / 100 * this.canvas.width;\n      const actualY = location.y / 100 * this.canvas.height;\n      difficulties.forEach((difficulty, index) => {\n        // Place spirits side by side with more space\n        const offset = (index - 1) * 50; // Increased from 25 to 50 pixels apart\n\n        this.spirits.push({\n          x: actualX + offset,\n          y: actualY,\n          difficulty: difficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025\n        });\n      });\n    });\n  }\n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => task.category === location.category && task.difficulty === difficulty).length;\n  }\n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  stop() {\n    this.isRunning = false;\n    // Clean up event listeners\n    this.canvas.removeEventListener('mousemove', this.bindEvents);\n    this.canvas.removeEventListener('mouseleave', this.bindEvents);\n  }\n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw background only\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    // Draw spirits only - no circles, no location markers, no task counts\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      if (spiritImage && spiritImage.complete && spiritImage.naturalWidth > 0) {\n        // Dynamic size based on hover state\n        const isHovered = this.hoveredSpirit === spirit;\n        const imageSize = isHovered ? 80 : 50; // 50px normal, 80px on hover\n\n        // Use high-quality rendering\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n\n        // Draw the spirit image (with red circle)\n        this.ctx.drawImage(spiritImage, spirit.x - imageSize / 2, spirit.y - imageSize / 2, imageSize, imageSize);\n\n        // Add dynamic number inside the red circle\n        const taskCount = this.getTaskCount(spirit.location, spirit.difficulty);\n        if (taskCount > 0) {\n          // Position the number perfectly centered inside the red circle\n          const numberX = spirit.x + imageSize * 0.21; // Fine-tuned horizontal center\n          const numberY = spirit.y + imageSize * 0.21; // Fine-tuned vertical center\n\n          this.ctx.fillStyle = '#fff'; // White text\n          this.ctx.font = `bold ${Math.floor(imageSize * 0.18)}px Arial`; // Slightly smaller font for better fit\n          this.ctx.textAlign = 'center';\n          this.ctx.textBaseline = 'middle';\n\n          // Add text shadow for better visibility\n          this.ctx.strokeStyle = '#000';\n          this.ctx.lineWidth = 1.5;\n          this.ctx.strokeText(taskCount.toString(), numberX, numberY);\n          this.ctx.fillText(taskCount.toString(), numberX, numberY);\n        }\n      }\n    });\n  }\n  getSpiritImage(difficulty) {\n    const imageMap = {\n      common: 'spirit1',\n      rare: 'spirit2',\n      epic: 'spirit3'\n    };\n    return this.images[imageMap[difficulty]];\n  }\n  getSpiritColor(difficulty) {\n    const colorMap = {\n      common: '#66B2FF',\n      rare: '#9B59B6',\n      epic: '#FF6B6B'\n    };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\nexport default HotPotatoGame;","map":{"version":3,"names":["HotPotatoGame","constructor","canvasId","gameState","updateScore","hotPotatoes","teamStats","currentUser","onTaskClick","onTaskComplete","canvas","document","getElementById","ctx","getContext","isRunning","spirits","locations","initializeLocations","hoveredSpirit","loadImages","resizeCanvas","bindEvents","addEventListener","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","newHoveredSpirit","spirit","distance","Math","sqrt","x","y","style","cursor","images","imageUrls","background","spirit1","spirit2","spirit3","key","url","Object","entries","img","Image","src","name","category","generateSpirits","difficulties","forEach","location","actualX","width","actualY","height","difficulty","index","offset","push","size","min","getTaskCount","filter","task","length","start","gameLoop","stop","removeEventListener","render","clearRect","drawImage","spiritImage","getSpiritImage","complete","naturalWidth","isHovered","imageSize","imageSmoothingEnabled","imageSmoothingQuality","taskCount","numberX","numberY","fillStyle","font","floor","textAlign","textBaseline","strokeStyle","lineWidth","strokeText","toString","fillText","imageMap","common","rare","epic","getSpiritColor","colorMap","requestAnimationFrame"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/game.js"],"sourcesContent":["class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    \n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.hoveredSpirit = null; // Track which spirit is being hovered\n    this.loadImages();\n    this.resizeCanvas();\n    this.bindEvents();\n  }\n  \n  bindEvents() {\n    // Add mouse move listener for hover effects\n    this.canvas.addEventListener('mousemove', (e) => {\n      const rect = this.canvas.getBoundingClientRect();\n      const mouseX = e.clientX - rect.left;\n      const mouseY = e.clientY - rect.top;\n      \n      let newHoveredSpirit = null;\n      \n      // Check if mouse is over any spirit\n      for (let spirit of this.spirits) {\n        const distance = Math.sqrt((mouseX - spirit.x) ** 2 + (mouseY - spirit.y) ** 2);\n        if (distance < 40) { // 50px radius for hover detection\n          newHoveredSpirit = spirit;\n          break;\n        }\n      }\n      \n      this.hoveredSpirit = newHoveredSpirit;\n      this.canvas.style.cursor = this.hoveredSpirit ? 'pointer' : 'default';\n    });\n    \n    // Add mouse leave listener\n    this.canvas.addEventListener('mouseleave', () => {\n      this.hoveredSpirit = null;\n      this.canvas.style.cursor = 'default';\n    });\n  }\n  \n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png', \n      spirit3: 'myimages/spirit3.png'\n    };\n    \n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  \n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    return [\n      { name: \"Sales Office\", x: 20.8, y: 76.2, category: \"Sales\" },\n      { name: \"New Lead\", x: 20.2, y: 39.1, category: \"New Lead\" },\n      { name: \"New Customer\", x: 45.6, y: 35.2, category: \"New Customer\" },\n      { name: \"Pre-Construction\", x: 69.0, y: 24.4, category: \"Pre-Construction\" },\n      { name: \"Construction\", x: 71.6, y: 65.4, category: \"Construction\" },\n      { name: \"Post Construction\", x: 86.6, y: 77.1, category: \"Post Construction\" }\n    ];\n  }\n  \n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    \n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = (location.x / 100) * this.canvas.width;\n      const actualY = (location.y / 100) * this.canvas.height;\n      \n      difficulties.forEach((difficulty, index) => {\n        // Place spirits side by side with more space\n        const offset = (index - 1) * 50; // Increased from 25 to 50 pixels apart\n        \n        this.spirits.push({\n          x: actualX + offset,\n          y: actualY,\n          difficulty: difficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025\n        });\n      });\n    });\n  }\n  \n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => \n      task.category === location.category && task.difficulty === difficulty\n    ).length;\n  }\n  \n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  \n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  \n  stop() {\n    this.isRunning = false;\n    // Clean up event listeners\n    this.canvas.removeEventListener('mousemove', this.bindEvents);\n    this.canvas.removeEventListener('mouseleave', this.bindEvents);\n  }\n  \n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw background only\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    // Draw spirits only - no circles, no location markers, no task counts\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      \n      if (spiritImage && spiritImage.complete && spiritImage.naturalWidth > 0) {\n        // Dynamic size based on hover state\n        const isHovered = this.hoveredSpirit === spirit;\n        const imageSize = isHovered ? 80 : 50; // 50px normal, 80px on hover\n        \n        // Use high-quality rendering\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n        \n        // Draw the spirit image (with red circle)\n        this.ctx.drawImage(spiritImage, spirit.x - imageSize/2, spirit.y - imageSize/2, imageSize, imageSize);\n        \n        // Add dynamic number inside the red circle\n        const taskCount = this.getTaskCount(spirit.location, spirit.difficulty);\n        if (taskCount > 0) {\n          // Position the number perfectly centered inside the red circle\n          const numberX = spirit.x + (imageSize * 0.21); // Fine-tuned horizontal center\n          const numberY = spirit.y + (imageSize * 0.21); // Fine-tuned vertical center\n          \n          this.ctx.fillStyle = '#fff'; // White text\n          this.ctx.font = `bold ${Math.floor(imageSize * 0.18)}px Arial`; // Slightly smaller font for better fit\n          this.ctx.textAlign = 'center';\n          this.ctx.textBaseline = 'middle';\n          \n          // Add text shadow for better visibility\n          this.ctx.strokeStyle = '#000';\n          this.ctx.lineWidth = 1.5;\n          this.ctx.strokeText(taskCount.toString(), numberX, numberY);\n          this.ctx.fillText(taskCount.toString(), numberX, numberY);\n        }\n      }\n    });\n  }\n  \n  getSpiritImage(difficulty) {\n    const imageMap = { common: 'spirit1', rare: 'spirit2', epic: 'spirit3' };\n    return this.images[imageMap[difficulty]];\n  }\n  \n  getSpiritColor(difficulty) {\n    const colorMap = { common: '#66B2FF', rare: '#9B59B6', epic: '#FF6B6B' };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  \n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\n\nexport default HotPotatoGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}