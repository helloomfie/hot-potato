{"ast":null,"code":"class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.loadImages();\n    this.resizeCanvas();\n  }\n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png',\n      spirit3: 'myimages/spirit3.png'\n    };\n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    return [{\n      name: \"Sales Office\",\n      x: 20.8,\n      y: 76.2,\n      category: \"Sales\"\n    }, {\n      name: \"New Lead\",\n      x: 20.2,\n      y: 39.1,\n      category: \"New Lead\"\n    }, {\n      name: \"New Customer\",\n      x: 45.6,\n      y: 35.2,\n      category: \"New Customer\"\n    }, {\n      name: \"Pre-Construction\",\n      x: 69.0,\n      y: 24.4,\n      category: \"Pre-Construction\"\n    }, {\n      name: \"Construction\",\n      x: 71.6,\n      y: 65.4,\n      category: \"Construction\"\n    }, {\n      name: \"Post Construction\",\n      x: 86.6,\n      y: 77.1,\n      category: \"Post Construction\"\n    }];\n  }\n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = location.x / 100 * this.canvas.width;\n      const actualY = location.y / 100 * this.canvas.height;\n      difficulties.forEach((difficulty, index) => {\n        // Place spirits side by side with more space\n        const offset = (index - 1) * 50; // Increased from 25 to 50 pixels apart\n\n        this.spirits.push({\n          x: actualX + offset,\n          y: actualY,\n          difficulty: difficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025\n        });\n      });\n    });\n  }\n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => task.category === location.category && task.difficulty === difficulty).length;\n  }\n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  stop() {\n    this.isRunning = false;\n  }\n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw background only\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    // Draw spirits only - no circles, no location markers, no task counts\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      if (spiritImage && spiritImage.complete && spiritImage.naturalWidth > 0) {\n        // Draw larger, higher quality spirit images\n        const imageSize = 80; // Increased from 40 to 80 pixels\n\n        // Use high-quality rendering\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n        this.ctx.drawImage(spiritImage, spirit.x - imageSize / 2, spirit.y - imageSize / 2, imageSize, imageSize);\n      }\n    });\n  }\n  getSpiritImage(difficulty) {\n    const imageMap = {\n      common: 'spirit1',\n      rare: 'spirit2',\n      epic: 'spirit3'\n    };\n    return this.images[imageMap[difficulty]];\n  }\n  getSpiritColor(difficulty) {\n    const colorMap = {\n      common: '#66B2FF',\n      rare: '#9B59B6',\n      epic: '#FF6B6B'\n    };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\nexport default HotPotatoGame;","map":{"version":3,"names":["HotPotatoGame","constructor","canvasId","gameState","updateScore","hotPotatoes","teamStats","currentUser","onTaskClick","onTaskComplete","canvas","document","getElementById","ctx","getContext","isRunning","spirits","locations","initializeLocations","loadImages","resizeCanvas","images","imageUrls","background","spirit1","spirit2","spirit3","key","url","Object","entries","img","Image","src","name","x","y","category","generateSpirits","difficulties","forEach","location","actualX","width","actualY","height","difficulty","index","offset","push","size","Math","min","getTaskCount","filter","task","length","start","gameLoop","stop","render","clearRect","drawImage","spirit","spiritImage","getSpiritImage","complete","naturalWidth","imageSize","imageSmoothingEnabled","imageSmoothingQuality","imageMap","common","rare","epic","getSpiritColor","colorMap","requestAnimationFrame"],"sources":["/Users/SUNLAB/hot-potato/frontend/src/game.js"],"sourcesContent":["class HotPotatoGame {\n  constructor(canvasId, gameState, updateScore, hotPotatoes, teamStats, currentUser, onTaskClick, onTaskComplete) {\n    this.canvas = document.getElementById(canvasId);\n    this.ctx = this.canvas.getContext('2d');\n    this.hotPotatoes = hotPotatoes;\n    this.updateScore = updateScore;\n    this.onTaskClick = onTaskClick;\n    this.onTaskComplete = onTaskComplete;\n    \n    this.isRunning = false;\n    this.spirits = [];\n    this.locations = this.initializeLocations();\n    this.loadImages();\n    this.resizeCanvas();\n  }\n  \n  async loadImages() {\n    this.images = {};\n    const imageUrls = {\n      background: 'myimages/background.png',\n      spirit1: 'myimages/spirit1.png',\n      spirit2: 'myimages/spirit2.png', \n      spirit3: 'myimages/spirit3.png'\n    };\n    \n    for (const [key, url] of Object.entries(imageUrls)) {\n      const img = new Image();\n      img.src = url;\n      this.images[key] = img;\n    }\n  }\n  \n  initializeLocations() {\n    // Percentage-based coordinates (relative to canvas size)\n    return [\n      { name: \"Sales Office\", x: 20.8, y: 76.2, category: \"Sales\" },\n      { name: \"New Lead\", x: 20.2, y: 39.1, category: \"New Lead\" },\n      { name: \"New Customer\", x: 45.6, y: 35.2, category: \"New Customer\" },\n      { name: \"Pre-Construction\", x: 69.0, y: 24.4, category: \"Pre-Construction\" },\n      { name: \"Construction\", x: 71.6, y: 65.4, category: \"Construction\" },\n      { name: \"Post Construction\", x: 86.6, y: 77.1, category: \"Post Construction\" }\n    ];\n  }\n  \n  generateSpirits() {\n    this.spirits = [];\n    const difficulties = ['common', 'rare', 'epic'];\n    \n    this.locations.forEach(location => {\n      // Convert percentages to actual pixels\n      const actualX = (location.x / 100) * this.canvas.width;\n      const actualY = (location.y / 100) * this.canvas.height;\n      \n      difficulties.forEach((difficulty, index) => {\n        // Place spirits side by side with more space\n        const offset = (index - 1) * 50; // Increased from 25 to 50 pixels apart\n        \n        this.spirits.push({\n          x: actualX + offset,\n          y: actualY,\n          difficulty: difficulty,\n          location: location,\n          size: Math.min(this.canvas.width, this.canvas.height) * 0.025\n        });\n      });\n    });\n  }\n  \n  getTaskCount(location, difficulty) {\n    return this.hotPotatoes.filter(task => \n      task.category === location.category && task.difficulty === difficulty\n    ).length;\n  }\n  \n  resizeCanvas() {\n    this.canvas.width = 800;\n    this.canvas.height = 400;\n  }\n  \n  start() {\n    this.isRunning = true;\n    this.generateSpirits();\n    this.gameLoop();\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n  \n  render() {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw background only\n    if (this.images.background) {\n      this.ctx.drawImage(this.images.background, 0, 0, this.canvas.width, this.canvas.height);\n    }\n    \n    // Draw spirits only - no circles, no location markers, no task counts\n    this.spirits.forEach(spirit => {\n      const spiritImage = this.getSpiritImage(spirit.difficulty);\n      \n      if (spiritImage && spiritImage.complete && spiritImage.naturalWidth > 0) {\n        // Draw larger, higher quality spirit images\n        const imageSize = 80; // Increased from 40 to 80 pixels\n        \n        // Use high-quality rendering\n        this.ctx.imageSmoothingEnabled = true;\n        this.ctx.imageSmoothingQuality = 'high';\n        \n        this.ctx.drawImage(spiritImage, spirit.x - imageSize/2, spirit.y - imageSize/2, imageSize, imageSize);\n      }\n    });\n  }\n  \n  getSpiritImage(difficulty) {\n    const imageMap = { common: 'spirit1', rare: 'spirit2', epic: 'spirit3' };\n    return this.images[imageMap[difficulty]];\n  }\n  \n  getSpiritColor(difficulty) {\n    const colorMap = { common: '#66B2FF', rare: '#9B59B6', epic: '#FF6B6B' };\n    return colorMap[difficulty] || '#66B2FF';\n  }\n  \n  gameLoop() {\n    if (!this.isRunning) return;\n    this.render();\n    requestAnimationFrame(() => this.gameLoop());\n  }\n}\n\nexport default HotPotatoGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}